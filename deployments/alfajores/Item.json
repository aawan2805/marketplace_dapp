{
  "address": "0xCd889C8F388a84A076AcE1220BB9b84C50aDB0b0",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "itemId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        }
      ],
      "name": "ItemCancelled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        }
      ],
      "name": "print_balance",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        }
      ],
      "name": "print_seller_balance",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_title",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_description",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_price",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_image",
          "type": "string"
        }
      ],
      "name": "addItem",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "browseItems",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "itemId",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "title",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "description",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "image",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "createdAt",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "buyer",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "hasBuyer",
              "type": "bool"
            },
            {
              "internalType": "contract Escrow",
              "name": "escrow",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "seller",
              "type": "address"
            }
          ],
          "internalType": "struct Item.ItemStruct[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_itemId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_seller",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "cancel",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "refundBuyer",
          "type": "bool"
        }
      ],
      "name": "cancelItem",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_itemId",
          "type": "uint256"
        }
      ],
      "name": "deleteItem",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_itemId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_title",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_description",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_price",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_image",
          "type": "string"
        }
      ],
      "name": "editItem",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getItemsWithDispute",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "itemId",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "title",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "description",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "image",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "createdAt",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "buyer",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "hasBuyer",
              "type": "bool"
            },
            {
              "internalType": "contract Escrow",
              "name": "escrow",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "seller",
              "type": "address"
            }
          ],
          "internalType": "struct Item.ItemStruct[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "itemsCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "myPurchases",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "itemId",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "title",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "description",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "image",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "createdAt",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "buyer",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "hasBuyer",
              "type": "bool"
            },
            {
              "internalType": "contract Escrow",
              "name": "escrow",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "seller",
              "type": "address"
            }
          ],
          "internalType": "struct Item.ItemStruct[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mySales",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "itemId",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "title",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "description",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "image",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "createdAt",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "buyer",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "hasBuyer",
              "type": "bool"
            },
            {
              "internalType": "contract Escrow",
              "name": "escrow",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "seller",
              "type": "address"
            }
          ],
          "internalType": "struct Item.ItemStruct[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_itemId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_seller",
          "type": "address"
        }
      ],
      "name": "purchaseItem",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "retrieveUserItems",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "itemId",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "title",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "description",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "image",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "createdAt",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "buyer",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "hasBuyer",
              "type": "bool"
            },
            {
              "internalType": "contract Escrow",
              "name": "escrow",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "seller",
              "type": "address"
            }
          ],
          "internalType": "struct Item.ItemStruct[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_itemId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "tracking",
          "type": "string"
        }
      ],
      "name": "shipItem",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xeda05cfdc3f9cbcf055a31ee797581c285c8993ed5ca3fcbf3bedfcb6136dd7e",
  "receipt": {
    "to": null,
    "from": "0x38587D7dA5C1FB325e43244c3373747F50c19369",
    "contractAddress": "0xCd889C8F388a84A076AcE1220BB9b84C50aDB0b0",
    "transactionIndex": 0,
    "gasUsed": "4428236",
    "logsBloom": "0x
    "blockHash": "0x67ba94993fc0bbb09232a346facf017e647acb543e92ca20c5230398af0c74e2",
    "transactionHash": "0xeda05cfdc3f9cbcf055a31ee797581c285c8993ed5ca3fcbf3bedfcb6136dd7e",
    "logs": [],
    "blockNumber": 26014993,
    "cumulativeGasUsed": "4428236",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 57,
  "solcInputHash": "5a7b30ff4830177972928a92082941eb",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"}],\"name\":\"ItemCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"print_balance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"print_seller_balance\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_description\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_image\",\"type\":\"string\"}],\"name\":\"addItem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"browseItems\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"image\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"createdAt\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"hasBuyer\",\"type\":\"bool\"},{\"internalType\":\"contract Escrow\",\"name\":\"escrow\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"}],\"internalType\":\"struct Item.ItemStruct[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_itemId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_seller\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"cancel\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"refundBuyer\",\"type\":\"bool\"}],\"name\":\"cancelItem\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_itemId\",\"type\":\"uint256\"}],\"name\":\"deleteItem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_itemId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_description\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_image\",\"type\":\"string\"}],\"name\":\"editItem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getItemsWithDispute\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"image\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"createdAt\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"hasBuyer\",\"type\":\"bool\"},{\"internalType\":\"contract Escrow\",\"name\":\"escrow\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"}],\"internalType\":\"struct Item.ItemStruct[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"itemsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"myPurchases\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"image\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"createdAt\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"hasBuyer\",\"type\":\"bool\"},{\"internalType\":\"contract Escrow\",\"name\":\"escrow\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"}],\"internalType\":\"struct Item.ItemStruct[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mySales\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"image\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"createdAt\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"hasBuyer\",\"type\":\"bool\"},{\"internalType\":\"contract Escrow\",\"name\":\"escrow\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"}],\"internalType\":\"struct Item.ItemStruct[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_itemId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_seller\",\"type\":\"address\"}],\"name\":\"purchaseItem\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"retrieveUserItems\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"image\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"createdAt\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"hasBuyer\",\"type\":\"bool\"},{\"internalType\":\"contract Escrow\",\"name\":\"escrow\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"}],\"internalType\":\"struct Item.ItemStruct[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_itemId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"tracking\",\"type\":\"string\"}],\"name\":\"shipItem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Item.sol\":\"Item\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/Escrow.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.24;\\r\\n\\r\\ncontract Escrow {\\r\\n    enum State { \\r\\n        AWAITING_DELIVERY, \\r\\n        SHIPPED_OUT_BY_SELLER,\\r\\n        DELIVERY_CONFIRMED_BY_BUYER,\\r\\n\\r\\n        DISPUTE_OPENED, \\r\\n        DISPUTE_CLOSED \\r\\n    }\\r\\n    \\r\\n    uint public boughtAt;\\r\\n    State public currState;\\r\\n    address payable public buyer;\\r\\n    address payable public seller;\\r\\n    address private arbitrator;\\r\\n    string[] public disputeHistory;\\r\\n    bool private sellerSubmittedProof;\\r\\n    string public sellerProof;\\r\\n    string public buyerProof;\\r\\n    bool public isDisputeOpen;\\r\\n    string private trackingNumber;\\r\\n\\r\\n\\r\\n    modifier onlyBuyer() {\\r\\n        require(msg.sender == buyer, \\\"Only buyer can call this method\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlySeller() {\\r\\n        require(msg.sender == seller, \\\"Only seller can call this method\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyArbitrator() {\\r\\n        require(msg.sender == arbitrator, \\\"Only arbitrator can call this method\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    constructor(address payable _buyer, address payable _seller) payable {\\r\\n        buyer = _buyer;\\r\\n        seller = _seller;\\r\\n        arbitrator = 0x6A7d3230514Ee0E8078F23Cf65b367D9984b055A;\\r\\n        currState = State.AWAITING_DELIVERY;\\r\\n        sellerSubmittedProof = false;\\r\\n        boughtAt = block.timestamp;\\r\\n        disputeHistory.push(\\\"Item bought.\\\");\\r\\n        isDisputeOpen = false;\\r\\n    }\\r\\n    \\r\\n    function ship(string memory tracking) external onlySeller {\\r\\n        require(currState == State.AWAITING_DELIVERY, \\\"Cannot ship. Incorrect status.\\\");\\r\\n        require(block.timestamp >= boughtAt + 1 minutes, \\\"Cannot ship before 15 minute cancellation period has elapsed.\\\");\\r\\n        currState = State.SHIPPED_OUT_BY_SELLER;\\r\\n        trackingNumber = tracking;\\r\\n        disputeHistory.push(\\\"Item sent by the seller.\\\");\\r\\n    }\\r\\n\\r\\n    function confirmDelivery() external onlyBuyer {\\r\\n        require(currState == State.SHIPPED_OUT_BY_SELLER, \\\"Cannot confirm delivery\\\");\\r\\n        seller.transfer(address(this).balance);\\r\\n        currState = State.DELIVERY_CONFIRMED_BY_BUYER;\\r\\n        disputeHistory.push(\\\"Item recieved by the buyer.\\\");\\r\\n    }\\r\\n\\r\\n    function refundBuyerForCancelItem() payable external {\\r\\n        require(currState == State.AWAITING_DELIVERY, \\\"Cannot refund. Item has already been shipped or is in another state.\\\");\\r\\n        require(block.timestamp < boughtAt + 1 minutes, \\\"Cancellation period has passed.\\\");\\r\\n\\r\\n        buyer.transfer(address(this).balance);\\r\\n\\r\\n        currState = State.DISPUTE_CLOSED; // State updated to reflect the refund\\r\\n        disputeHistory.push(\\\"Item cancelled and refunded to the buyer.\\\");\\r\\n\\r\\n    }\\r\\n\\r\\n    // Disputes\\r\\n    function openDispute() external onlyBuyer {\\r\\n        require(currState == State.SHIPPED_OUT_BY_SELLER, \\\"Cannot open dispute at this stage\\\");\\r\\n        currState = State.DISPUTE_OPENED;\\r\\n        isDisputeOpen = true;\\r\\n        disputeHistory.push(\\\"Dispute opened by the buyer.\\\");\\r\\n    }\\r\\n\\r\\n    function submitSellerProof(string memory proof) external onlySeller {\\r\\n        require(currState == State.DISPUTE_OPENED, \\\"No active dispute\\\");\\r\\n        require(bytes(sellerProof).length == 0, \\\"Proof already submitted by seller\\\");\\r\\n        sellerProof = proof;\\r\\n    }\\r\\n\\r\\n    function submitBuyerProof(string memory proof) external onlyBuyer {\\r\\n        require(currState == State.DISPUTE_OPENED, \\\"No active dispute\\\");\\r\\n        require(bytes(buyerProof).length == 0, \\\"Proof already submitted by buyer\\\");\\r\\n        require(bytes(sellerProof).length > 0, \\\"Seller must submit proof first\\\");\\r\\n        buyerProof = proof;\\r\\n    }\\r\\n\\r\\n    function resolveDispute(bool refundBuyer) payable external onlyArbitrator {\\r\\n        require(currState == State.DISPUTE_OPENED, \\\"No active dispute\\\");\\r\\n        if (refundBuyer) {\\r\\n            buyer.transfer(address(this).balance);\\r\\n            disputeHistory.push(\\\"Dispute closed. Buyer was refunded.\\\");\\r\\n        } else {\\r\\n            seller.transfer(address(this).balance);\\r\\n            disputeHistory.push(\\\"Dispute closed. Seller was refunded.\\\");\\r\\n        }\\r\\n        currState = State.DISPUTE_CLOSED;\\r\\n        isDisputeOpen = false;\\r\\n    }\\r\\n\\r\\n    function getDisputeHistory() external view returns (string[] memory, string memory, string memory) {\\r\\n        return (disputeHistory, sellerProof, buyerProof);\\r\\n    }\\r\\n\\r\\n    function getState() external view returns (State, string memory, string memory, string memory) {\\r\\n        return (currState, trackingNumber, sellerProof, buyerProof);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x1fe1fa194dc80d318410b537965910f9f4307c85ccf5d3b56723fb2c2c93f664\",\"license\":\"MIT\"},\"contracts/Item.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.24;\\r\\nimport \\\"./Escrow.sol\\\";\\r\\nimport \\\"hardhat/console.sol\\\";\\r\\n\\r\\ncontract Item {\\r\\n    struct ItemStruct {\\r\\n        uint itemId;\\r\\n        string title;\\r\\n        string description;\\r\\n        uint price;\\r\\n        string image;\\r\\n        uint createdAt;\\r\\n        address buyer;\\r\\n        bool hasBuyer;\\r\\n        Escrow escrow;\\r\\n        address seller;\\r\\n    }\\r\\n\\r\\n    // WEI (ETH)\\r\\n\\r\\n    mapping(address => ItemStruct[]) private items;\\r\\n    uint public itemsCount;\\r\\n    address[] private sellers;\\r\\n\\r\\n    function addItem(\\r\\n        string memory _title,\\r\\n        string memory _description,\\r\\n        uint _price,\\r\\n        string memory _image\\r\\n    ) external {\\r\\n        console.log(\\\"Price is: %s\\\", _price);\\r\\n        if (items[msg.sender].length == 0) {\\r\\n            sellers.push(msg.sender);\\r\\n        }\\r\\n        itemsCount++;\\r\\n        items[msg.sender].push(ItemStruct(\\r\\n            itemsCount,\\r\\n            _title,\\r\\n            _description,\\r\\n            _price,\\r\\n            _image,\\r\\n            block.timestamp,\\r\\n            address(0),\\r\\n            false,\\r\\n            Escrow(address(0)),\\r\\n            msg.sender\\r\\n        ));\\r\\n    }\\r\\n\\r\\n    function editItem(\\r\\n        uint _itemId,\\r\\n        string memory _title,\\r\\n        string memory _description,\\r\\n        uint _price,\\r\\n        string memory _image\\r\\n    ) external {\\r\\n        require(_itemId > 0 && _itemId <= itemsCount, \\\"Invalid item ID\\\");\\r\\n        ItemStruct[] storage userItems = items[msg.sender];\\r\\n        bool itemFound = false;\\r\\n        for (uint i = 0; i < userItems.length; i++) {\\r\\n            if (userItems[i].itemId == _itemId) {\\r\\n                itemFound = true;\\r\\n                require(!userItems[i].hasBuyer, \\\"Item already sold\\\");\\r\\n                userItems[i].title = _title;\\r\\n                userItems[i].description = _description;\\r\\n                userItems[i].price = _price;\\r\\n                userItems[i].image = _image;\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n        require(itemFound, \\\"Item does not belong to sender\\\");\\r\\n    }\\r\\n\\r\\n    function deleteItem(uint _itemId) external {\\r\\n        ItemStruct[] storage userItems = items[msg.sender];\\r\\n        bool itemFound = false;\\r\\n        uint itemIndex;\\r\\n\\r\\n        for (uint i = 0; i < userItems.length; i++) {\\r\\n            if (userItems[i].itemId == _itemId) {\\r\\n                require(!userItems[i].hasBuyer, \\\"Item already sold\\\");\\r\\n                itemFound = true;\\r\\n                itemIndex = i;\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        require(itemFound, \\\"Item does not exist\\\");\\r\\n\\r\\n        uint lastIndex = userItems.length - 1;\\r\\n        if (itemIndex != lastIndex) {\\r\\n            userItems[itemIndex] = userItems[lastIndex];\\r\\n            userItems[itemIndex].itemId = _itemId;\\r\\n        }\\r\\n        userItems.pop();\\r\\n    }\\r\\n\\r\\n    function retrieveUserItems() external view returns (ItemStruct[] memory) {\\r\\n        return items[msg.sender];\\r\\n    }\\r\\n\\r\\n    function browseItems() external view returns (ItemStruct[] memory) {\\r\\n        uint totalItems = 0;\\r\\n        uint currentIndex = 0;\\r\\n\\r\\n        for (uint s = 0; s < sellers.length; s++) {\\r\\n            if (sellers[s] != msg.sender) {\\r\\n                totalItems += items[sellers[s]].length;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        ItemStruct[] memory allItems = new ItemStruct[](totalItems);\\r\\n\\r\\n        for (uint s = 0; s < sellers.length; s++) {\\r\\n            if (sellers[s] != msg.sender) {\\r\\n                ItemStruct[] storage sellerItems = items[sellers[s]];\\r\\n                for (uint i = 0; i < sellerItems.length; i++) {\\r\\n                    if (!sellerItems[i].hasBuyer) {\\r\\n                        allItems[currentIndex] = sellerItems[i];\\r\\n                        currentIndex++;\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        console.log(\\\"Total Items: \\\", totalItems);\\r\\n        console.log(\\\"Current Index: \\\", currentIndex);\\r\\n\\r\\n        return allItems;\\r\\n    }\\r\\n\\r\\n    function purchaseItem(uint _itemId, address _seller) external payable {\\r\\n        // Ensure the item exists\\r\\n        require(_itemId > 0 && _itemId <= itemsCount, \\\"Invalid item ID\\\");\\r\\n\\r\\n        // Retrieve the seller's items\\r\\n        ItemStruct[] storage userItems = items[_seller];\\r\\n        bool itemFound = false;\\r\\n        uint itemIndex;\\r\\n\\r\\n        // Find the item in the seller's list\\r\\n        for (uint i = 0; i < userItems.length; i++) {\\r\\n            if (userItems[i].itemId == _itemId) {\\r\\n                itemFound = true;\\r\\n                itemIndex = i;\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        // Ensure the item is found and has no buyer yet\\r\\n        require(itemFound, \\\"Item not found\\\");\\r\\n        require(!userItems[itemIndex].hasBuyer, \\\"Item already sold\\\");\\r\\n        require(userItems[itemIndex].seller == _seller, \\\"Owner can not buy the item.\\\");\\r\\n\\r\\n        // Ensure the correct amount of ether is sent\\r\\n        require(msg.value == userItems[itemIndex].price, \\\"Incorrect amount of ether/wei sent.\\\");\\r\\n\\r\\n        // Create a new Escrow contract instance\\r\\n        Escrow escrow = (new Escrow){value: msg.value}(payable(msg.sender), payable(_seller));\\r\\n\\r\\n        // Update the item details\\r\\n        userItems[itemIndex].buyer = msg.sender;\\r\\n        userItems[itemIndex].hasBuyer = true;\\r\\n        userItems[itemIndex].escrow = escrow;\\r\\n\\r\\n        console.log(\\\"Item purchased: %s by %s\\\", userItems[itemIndex].title, msg.sender);\\r\\n    }\\r\\n\\r\\n    event ItemCancelled(uint itemId, address buyer);\\r\\n    event print_balance(uint balance);\\r\\n    event print_seller_balance(uint balance);\\r\\n\\r\\n    function cancelItem(uint _itemId, address _seller, bool cancel, bool refundBuyer) public payable {\\r\\n        ItemStruct[] storage userItems = items[_seller];\\r\\n        bool itemFound = false;\\r\\n        uint itemIndex;\\r\\n\\r\\n        for (uint i = 0; i < userItems.length; i++) {\\r\\n            if (userItems[i].itemId == _itemId) {\\r\\n                itemFound = true;\\r\\n                itemIndex = i;\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        require(itemFound, \\\"Item not found\\\");\\r\\n        require(userItems[itemIndex].hasBuyer, \\\"Item hasss not been purchased\\\");\\r\\n        require(userItems[itemIndex].buyer == msg.sender, \\\"Only the buyer can cancel the order\\\");\\r\\n        require(block.timestamp <= userItems[itemIndex].escrow.boughtAt() + 1 minutes, \\\"Cancellation period has expired\\\");\\r\\n\\r\\n        // Cancel the order\\r\\n        userItems[itemIndex].hasBuyer = false;\\r\\n        userItems[itemIndex].buyer = address(0);\\r\\n\\r\\n        uint256 escrowBalance = address(userItems[itemIndex].escrow).balance;\\r\\n        emit print_balance(escrowBalance);\\r\\n        emit print_seller_balance(address(_seller).balance);\\r\\n\\r\\n        if(cancel == true) {\\r\\n            // Refund the buyer\\r\\n            userItems[itemIndex].escrow.refundBuyerForCancelItem(); // Refund the buyer\\r\\n        } else {\\r\\n            userItems[itemIndex].escrow.resolveDispute(refundBuyer);\\r\\n        }\\r\\n        uint256 escrowBalance2 = address(userItems[itemIndex].escrow).balance;\\r\\n        emit print_balance(escrowBalance2);\\r\\n\\r\\n        userItems[itemIndex].escrow = Escrow(address(0)); // Reset escrow\\r\\n\\r\\n        emit ItemCancelled(_itemId, msg.sender);\\r\\n        emit print_seller_balance(address(_seller).balance);\\r\\n\\r\\n        console.log(\\\"Order canceled: %s by %s\\\", userItems[itemIndex].title, msg.sender);\\r\\n    }\\r\\n\\r\\n\\r\\n    function myPurchases() external view returns (ItemStruct[] memory) {\\r\\n        uint totalPurchases = 0;\\r\\n        uint currentIndex = 0;\\r\\n\\r\\n        // First count the number of purchases by the caller\\r\\n        for (uint s = 0; s < sellers.length; s++) {\\r\\n            ItemStruct[] storage sellerItems = items[sellers[s]];\\r\\n            for (uint i = 0; i < sellerItems.length; i++) {\\r\\n                if (sellerItems[i].buyer == msg.sender) {\\r\\n                    totalPurchases++;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        // Create an array with the exact number of purchases\\r\\n        ItemStruct[] memory purchases = new ItemStruct[](totalPurchases);\\r\\n\\r\\n        // Populate the purchases array with the actual purchases\\r\\n        for (uint s = 0; s < sellers.length; s++) {\\r\\n            ItemStruct[] storage sellerItems = items[sellers[s]];\\r\\n            for (uint i = 0; i < sellerItems.length; i++) {\\r\\n                if (sellerItems[i].buyer == msg.sender) {\\r\\n                    purchases[currentIndex] = sellerItems[i];\\r\\n                    currentIndex++;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return purchases;\\r\\n    }\\r\\n\\r\\n    function mySales() external view returns (ItemStruct[] memory) {\\r\\n        uint totalSales = 0;\\r\\n        uint currentIndex = 0;\\r\\n\\r\\n        // First count the number of sales by the caller\\r\\n        ItemStruct[] storage userItems = items[msg.sender];\\r\\n        for (uint i = 0; i < userItems.length; i++) {\\r\\n            if (userItems[i].hasBuyer) {\\r\\n                totalSales++;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        // Create an array with the exact number of sales\\r\\n        ItemStruct[] memory sales = new ItemStruct[](totalSales);\\r\\n\\r\\n        // Populate the sales array with the actual sales\\r\\n        for (uint i = 0; i < userItems.length; i++) {\\r\\n            if (userItems[i].hasBuyer) {\\r\\n                sales[currentIndex] = userItems[i];\\r\\n                currentIndex++;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return sales;\\r\\n    }\\r\\n\\r\\n    function shipItem(uint _itemId, string memory tracking) external {\\r\\n        ItemStruct[] storage userItems = items[msg.sender];\\r\\n        bool itemFound = false;\\r\\n        uint itemIndex;\\r\\n\\r\\n        // Find the item in the seller's list\\r\\n        for (uint i = 0; i < userItems.length; i++) {\\r\\n            if (userItems[i].itemId == _itemId) {\\r\\n                itemFound = true;\\r\\n                itemIndex = i;\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        require(itemFound, \\\"Item not found\\\");\\r\\n        require(userItems[itemIndex].hasBuyer, \\\"Item has not been purchased\\\");\\r\\n        require(msg.sender == userItems[itemIndex].seller, \\\"Only seller can ship this item\\\");\\r\\n\\r\\n        // Call the ship() method from the Escrow contract associated with this item\\r\\n        userItems[itemIndex].escrow.ship(tracking);\\r\\n        console.log(\\\"Item shipped: %s by %s\\\", userItems[itemIndex].title, msg.sender);\\r\\n    }\\r\\n\\r\\n    // Function to retrieve items with an opened dispute\\r\\n    function getItemsWithDispute() external view returns (ItemStruct[] memory) {\\r\\n        uint totalDisputes = 0;\\r\\n        uint currentIndex = 0;\\r\\n\\r\\n        // First count the number of items with an open dispute\\r\\n        for (uint s = 0; s < sellers.length; s++) {\\r\\n            ItemStruct[] storage sellerItems = items[sellers[s]];\\r\\n            for (uint i = 0; i < sellerItems.length; i++) {\\r\\n                if (sellerItems[i].hasBuyer && sellerItems[i].escrow.currState() == Escrow.State.DISPUTE_OPENED) {\\r\\n                    totalDisputes++;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        // Create an array with the exact number of disputed items\\r\\n        ItemStruct[] memory disputedItems = new ItemStruct[](totalDisputes);\\r\\n\\r\\n        // Populate the array with items having an open dispute\\r\\n        for (uint s = 0; s < sellers.length; s++) {\\r\\n            ItemStruct[] storage sellerItems = items[sellers[s]];\\r\\n            for (uint i = 0; i < sellerItems.length; i++) {\\r\\n                if (sellerItems[i].hasBuyer && sellerItems[i].escrow.currState() == Escrow.State.DISPUTE_OPENED) {\\r\\n                    disputedItems[currentIndex] = sellerItems[i];\\r\\n                    currentIndex++;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return disputedItems;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x2b0d7d78db09e92b3fcabf29157897982ee1ff244b00b75eb98b2ad957db4b8d\",\"license\":\"MIT\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.22 <0.9.0;\\n\\nlibrary console {\\n    address constant CONSOLE_ADDRESS =\\n        0x000000000000000000636F6e736F6c652e6c6f67;\\n\\n    function _sendLogPayloadImplementation(bytes memory payload) internal view {\\n        address consoleAddress = CONSOLE_ADDRESS;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            pop(\\n                staticcall(\\n                    gas(),\\n                    consoleAddress,\\n                    add(payload, 32),\\n                    mload(payload),\\n                    0,\\n                    0\\n                )\\n            )\\n        }\\n    }\\n\\n    function _castToPure(\\n      function(bytes memory) internal view fnIn\\n    ) internal pure returns (function(bytes memory) pure fnOut) {\\n        assembly {\\n            fnOut := fnIn\\n        }\\n    }\\n\\n    function _sendLogPayload(bytes memory payload) internal pure {\\n        _castToPure(_sendLogPayloadImplementation)(payload);\\n    }\\n\\n    function log() internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n    }\\n    function logInt(int256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(int256)\\\", p0));\\n    }\\n\\n    function logUint(uint256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n    }\\n\\n    function logString(string memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function logBool(bool p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function logAddress(address p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function logBytes(bytes memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n    }\\n\\n    function logBytes1(bytes1 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n    }\\n\\n    function logBytes2(bytes2 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n    }\\n\\n    function logBytes3(bytes3 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n    }\\n\\n    function logBytes4(bytes4 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n    }\\n\\n    function logBytes5(bytes5 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n    }\\n\\n    function logBytes6(bytes6 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n    }\\n\\n    function logBytes7(bytes7 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n    }\\n\\n    function logBytes8(bytes8 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n    }\\n\\n    function logBytes9(bytes9 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n    }\\n\\n    function logBytes10(bytes10 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n    }\\n\\n    function logBytes11(bytes11 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n    }\\n\\n    function logBytes12(bytes12 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n    }\\n\\n    function logBytes13(bytes13 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n    }\\n\\n    function logBytes14(bytes14 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n    }\\n\\n    function logBytes15(bytes15 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n    }\\n\\n    function logBytes16(bytes16 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n    }\\n\\n    function logBytes17(bytes17 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n    }\\n\\n    function logBytes18(bytes18 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n    }\\n\\n    function logBytes19(bytes19 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n    }\\n\\n    function logBytes20(bytes20 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n    }\\n\\n    function logBytes21(bytes21 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n    }\\n\\n    function logBytes22(bytes22 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n    }\\n\\n    function logBytes23(bytes23 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n    }\\n\\n    function logBytes24(bytes24 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n    }\\n\\n    function logBytes25(bytes25 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n    }\\n\\n    function logBytes26(bytes26 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n    }\\n\\n    function logBytes27(bytes27 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n    }\\n\\n    function logBytes28(bytes28 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n    }\\n\\n    function logBytes29(bytes29 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n    }\\n\\n    function logBytes30(bytes30 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n    }\\n\\n    function logBytes31(bytes31 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n    }\\n\\n    function logBytes32(bytes32 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n    }\\n\\n    function log(uint256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n    }\\n\\n    function log(string memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function log(bool p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function log(address p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function log(uint256 p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n}\\n\",\"keccak256\":\"0x7434453e6d3b7d0e5d0eb7846ffdbc27f0ccf3b163591263739b628074dc103a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50614f52806100206000396000f3fe608060405260043610620000b55760003560e01c80638af8a986116200006c5780638af8a98614620001975780639ab7e23b14620001af578063b24db86f14620001c7578063ba30154114620001df578063dbc3767014620001f6578063e2c03ace146200020e57600080fd5b80630461459a14620000ba57806313df81d614620000e157806338f5234f14620001065780634d25ce471462000136578063654fc833146200015b5780637bfe9efd1462000180575b600080fd5b348015620000c757600080fd5b50620000df620000d936600462002e2a565b62000235565b005b348015620000ee57600080fd5b50620000df6200010036600462002ed0565b62000463565b3480156200011357600080fd5b506200011e62000640565b6040516200012d919062002fb4565b60405180910390f35b3480156200014357600080fd5b50620000df62000155366004620030cd565b620009fb565b3480156200016857600080fd5b50620000df6200017a36600462003118565b62000d05565b620000df620001913660046200314f565b6200100b565b348015620001a457600080fd5b506200011e620013c2565b348015620001bc57600080fd5b506200011e6200182d565b348015620001d457600080fd5b506200011e62001aca565b620000df620001f03660046200318f565b62002081565b3480156200020357600080fd5b506200011e620026fa565b3480156200021b57600080fd5b506200022660015481565b6040519081526020016200012d565b6000851180156200024857506001548511155b6200028c5760405162461bcd60e51b815260206004820152600f60248201526e125b9d985b1a59081a5d195b481251608a1b60448201526064015b60405180910390fd5b33600090815260208190526040812090805b82548110156200040a5787838281548110620002be57620002be620031e3565b90600052602060002090600902016000015403620004015760019150828181548110620002ef57620002ef620031e3565b906000526020600020906009020160060160149054906101000a900460ff16156200032e5760405162461bcd60e51b81526004016200028390620031f9565b86838281548110620003445762000344620031e3565b90600052602060002090600902016001019081620003639190620032ac565b50858382815481106200037a576200037a620031e3565b90600052602060002090600902016002019081620003999190620032ac565b5084838281548110620003b057620003b0620031e3565b90600052602060002090600902016003018190555083838281548110620003db57620003db620031e3565b90600052602060002090600902016004019081620003fa9190620032ac565b506200040a565b6001016200029e565b50806200045a5760405162461bcd60e51b815260206004820152601e60248201527f4974656d20646f6573206e6f742062656c6f6e6720746f2073656e6465720000604482015260640162000283565b50505050505050565b620004936040518060400160405280600c81526020016b50726963652069733a20257360a01b8152508362002bdb565b336000908152602081905260408120549003620004ed57600280546001810182556000919091527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace0180546001600160a01b031916331790555b60018054906000620004ff836200338f565b9091555050336000818152602081815260408083208151610140810183526001805482528185018b81529382018a905260608201899052608082018890524260a083015260c0820186905260e082018690526101008201869052610120820196909652815480870183559185529290932082516009909402019283555190928201906200058d9082620032ac565b5060408201516002820190620005a49082620032ac565b506060820151600382015560808201516004820190620005c59082620032ac565b5060a0820151600582015560c082015160068201805460e08501511515600160a01b026001600160a81b03199091166001600160a01b03938416171790556101008301516007830180549183166001600160a01b03199283161790556101209093015160089092018054929091169190921617905550505050565b336000908152602081905260408120606091908190815b8154811015620006b457818181548110620006765762000676620031e3565b906000526020600020906009020160060160149054906101000a900460ff1615620006ab5783620006a7816200338f565b9450505b60010162000657565b5060008367ffffffffffffffff811115620006d357620006d362002d7f565b6040519080825280602002602001820160405280156200071057816020015b620006fc62002ca7565b815260200190600190039081620006f25790505b50905060005b8254811015620009f257828181548110620007355762000735620031e3565b906000526020600020906009020160060160149054906101000a900460ff1615620009e9578281815481106200076f576200076f620031e3565b90600052602060002090600902016040518061014001604052908160008201548152602001600182018054620007a59062003224565b80601f0160208091040260200160405190810160405280929190818152602001828054620007d39062003224565b8015620008245780601f10620007f85761010080835404028352916020019162000824565b820191906000526020600020905b8154815290600101906020018083116200080657829003601f168201915b505050505081526020016002820180546200083f9062003224565b80601f01602080910402602001604051908101604052809291908181526020018280546200086d9062003224565b8015620008be5780601f106200089257610100808354040283529160200191620008be565b820191906000526020600020905b815481529060010190602001808311620008a057829003601f168201915b5050505050815260200160038201548152602001600482018054620008e39062003224565b80601f0160208091040260200160405190810160405280929190818152602001828054620009119062003224565b8015620009625780601f10620009365761010080835404028352916020019162000962565b820191906000526020600020905b8154815290600101906020018083116200094457829003601f168201915b50505091835250506005820154602082015260068201546001600160a01b038082166040840152600160a01b90910460ff161515606083015260078301548116608083015260089092015490911660a0909101528251839086908110620009cd57620009cd620031e3565b60200260200101819052508380620009e5906200338f565b9450505b60010162000716565b50949350505050565b3360009081526020819052604081209080805b835481101562000a5c578584828154811062000a2e5762000a2e620031e3565b9060005260206000209060090201600001540362000a53576001925080915062000a5c565b60010162000a0e565b508162000a7d5760405162461bcd60e51b81526004016200028390620033ab565b82818154811062000a925762000a92620031e3565b906000526020600020906009020160060160149054906101000a900460ff1662000aff5760405162461bcd60e51b815260206004820152601b60248201527f4974656d20686173206e6f74206265656e207075726368617365640000000000604482015260640162000283565b82818154811062000b145762000b14620031e3565b60009182526020909120600990910201600801546001600160a01b0316331462000b815760405162461bcd60e51b815260206004820152601e60248201527f4f6e6c792073656c6c65722063616e20736869702074686973206974656d0000604482015260640162000283565b82818154811062000b965762000b96620031e3565b6000918252602090912060076009909202010154604051636e9fd09b60e11b81526001600160a01b039091169063dd3fa1369062000bd9908790600401620033d3565b600060405180830381600087803b15801562000bf457600080fd5b505af115801562000c09573d6000803e3d6000fd5b5050505062000cfe604051806040016040528060168152602001754974656d20736869707065643a20257320627920257360501b81525084838154811062000c555762000c55620031e3565b9060005260206000209060090201600101805462000c739062003224565b80601f016020809104026020016040519081016040528092919081815260200182805462000ca19062003224565b801562000cf25780601f1062000cc65761010080835404028352916020019162000cf2565b820191906000526020600020905b81548152906001019060200180831162000cd457829003601f168201915b50505050503362002c28565b5050505050565b3360009081526020819052604081209080805b835481101562000dba578484828154811062000d385762000d38620031e3565b9060005260206000209060090201600001540362000db15783818154811062000d655762000d65620031e3565b906000526020600020906009020160060160149054906101000a900460ff161562000da45760405162461bcd60e51b81526004016200028390620031f9565b6001925080915062000dba565b60010162000d18565b508162000e005760405162461bcd60e51b8152602060048201526013602482015272125d195b48191bd95cc81b9bdd08195e1a5cdd606a1b604482015260640162000283565b825460009062000e1390600190620033e8565b905080821462000f625783818154811062000e325762000e32620031e3565b906000526020600020906009020184838154811062000e555762000e55620031e3565b60009182526020909120825460099092020190815560018082019062000e7e9084018262003404565b5060028181019062000e939084018262003404565b50600382015481600301556004820181600401908162000eb4919062003404565b50600582810154908201556006808301805491830180546001600160a01b03198082166001600160a01b039586169081178455935460ff600160a01b91829004161515026001600160a81b03199092169093171790556007808501549084018054831691841691909117905560089384015493909201805490921692169190911790558354859085908490811062000f505762000f50620031e3565b60009182526020909120600990910201555b8380548062000f755762000f75620034e6565b6000828152602081206009600019909301928302018181559062000f9d600183018262002d17565b62000fad60028301600062002d17565b600382016000905560048201600062000fc7919062002d17565b50600060058201556006810180546001600160a81b03191690556007810180546001600160a01b031990811690915560089091018054909116905590555050505050565b6000821180156200101e57506001548211155b6200105e5760405162461bcd60e51b815260206004820152600f60248201526e125b9d985b1a59081a5d195b481251608a1b604482015260640162000283565b6001600160a01b03811660009081526020819052604081209080805b8354811015620010c857858482815481106200109a576200109a620031e3565b90600052602060002090600902016000015403620010bf5760019250809150620010c8565b6001016200107a565b5081620010e95760405162461bcd60e51b81526004016200028390620033ab565b828181548110620010fe57620010fe620031e3565b906000526020600020906009020160060160149054906101000a900460ff16156200113d5760405162461bcd60e51b81526004016200028390620031f9565b836001600160a01b03168382815481106200115c576200115c620031e3565b60009182526020909120600860099092020101546001600160a01b031614620011c85760405162461bcd60e51b815260206004820152601b60248201527f4f776e65722063616e206e6f742062757920746865206974656d2e0000000000604482015260640162000283565b828181548110620011dd57620011dd620031e3565b90600052602060002090600902016003015434146200124b5760405162461bcd60e51b815260206004820152602360248201527f496e636f727265637420616d6f756e74206f662065746865722f776569207365604482015262373a1760e91b606482015260840162000283565b60003433866040516200125e9062002d56565b6001600160a01b039283168152911660208201526040016040518091039082f090508015801562001293573d6000803e3d6000fd5b50905033848381548110620012ac57620012ac620031e3565b906000526020600020906009020160060160006101000a8154816001600160a01b0302191690836001600160a01b031602179055506001848381548110620012f857620012f8620031e3565b906000526020600020906009020160060160146101000a81548160ff02191690831515021790555080848381548110620013365762001336620031e3565b906000526020600020906009020160070160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550620013ba6040518060400160405280601881526020017f4974656d207075726368617365643a202573206279202573000000000000000081525085848154811062000c555762000c55620031e3565b505050505050565b606060008060005b6002548110156200148757600080600060028481548110620013f057620013f0620031e3565b60009182526020808320909101546001600160a01b03168352820192909252604001812091505b81548110156200147c57336001600160a01b0316828281548110620014405762001440620031e3565b60009182526020909120600660099092020101546001600160a01b0316036200147357846200146f816200338f565b9550505b60010162001417565b5050600101620013ca565b5060008267ffffffffffffffff811115620014a657620014a662002d7f565b604051908082528060200260200182016040528015620014e357816020015b620014cf62002ca7565b815260200190600190039081620014c55790505b50905060005b60025481101562001825576000806000600284815481106200150f576200150f620031e3565b60009182526020808320909101546001600160a01b03168352820192909252604001812091505b81548110156200181a57336001600160a01b03168282815481106200155f576200155f620031e3565b60009182526020909120600660099092020101546001600160a01b0316036200181157818181548110620015975762001597620031e3565b90600052602060002090600902016040518061014001604052908160008201548152602001600182018054620015cd9062003224565b80601f0160208091040260200160405190810160405280929190818152602001828054620015fb9062003224565b80156200164c5780601f1062001620576101008083540402835291602001916200164c565b820191906000526020600020905b8154815290600101906020018083116200162e57829003601f168201915b50505050508152602001600282018054620016679062003224565b80601f0160208091040260200160405190810160405280929190818152602001828054620016959062003224565b8015620016e65780601f10620016ba57610100808354040283529160200191620016e6565b820191906000526020600020905b815481529060010190602001808311620016c857829003601f168201915b50505050508152602001600382015481526020016004820180546200170b9062003224565b80601f0160208091040260200160405190810160405280929190818152602001828054620017399062003224565b80156200178a5780601f106200175e576101008083540402835291602001916200178a565b820191906000526020600020905b8154815290600101906020018083116200176c57829003601f168201915b50505091835250506005820154602082015260068201546001600160a01b038082166040840152600160a01b90910460ff161515606083015260078301548116608083015260089092015490911660a0909101528451859087908110620017f557620017f5620031e3565b602002602001018190525084806200180d906200338f565b9550505b60010162001536565b5050600101620014e9565b509392505050565b33600090815260208181526040808320805482518185028101850190935280835260609492939192909184015b8282101562001ac1578382906000526020600020906009020160405180610140016040529081600082015481526020016001820180546200189b9062003224565b80601f0160208091040260200160405190810160405280929190818152602001828054620018c99062003224565b80156200191a5780601f10620018ee576101008083540402835291602001916200191a565b820191906000526020600020905b815481529060010190602001808311620018fc57829003601f168201915b50505050508152602001600282018054620019359062003224565b80601f0160208091040260200160405190810160405280929190818152602001828054620019639062003224565b8015620019b45780601f106200198857610100808354040283529160200191620019b4565b820191906000526020600020905b8154815290600101906020018083116200199657829003601f168201915b5050505050815260200160038201548152602001600482018054620019d99062003224565b80601f016020809104026020016040519081016040528092919081815260200182805462001a079062003224565b801562001a585780601f1062001a2c5761010080835404028352916020019162001a58565b820191906000526020600020905b81548152906001019060200180831162001a3a57829003601f168201915b5050509183525050600582015460208083019190915260068301546001600160a01b038082166040850152600160a01b90910460ff161515606084015260078401548116608084015260089093015490921660a09091015290825260019290920191016200185a565b50505050905090565b606060008060005b60025481101562001c395760008060006002848154811062001af85762001af8620031e3565b60009182526020808320909101546001600160a01b03168352820192909252604001812091505b815481101562001c2e5781818154811062001b3e5762001b3e620031e3565b906000526020600020906009020160060160149054906101000a900460ff16801562001c0f5750600382828154811062001b7c5762001b7c620031e3565b6000918252602091829020600760099092020101546040805163afe0104360e01b815290516001600160a01b039092169263afe01043926004808401938290030181865afa15801562001bd3573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001bf9919062003512565b600481111562001c0d5762001c0d620034fc565b145b1562001c25578462001c21816200338f565b9550505b60010162001b1f565b505060010162001ad2565b5060008267ffffffffffffffff81111562001c585762001c5862002d7f565b60405190808252806020026020018201604052801562001c9557816020015b62001c8162002ca7565b81526020019060019003908162001c775790505b50905060005b600254811015620018255760008060006002848154811062001cc15762001cc1620031e3565b60009182526020808320909101546001600160a01b03168352820192909252604001812091505b8154811015620020765781818154811062001d075762001d07620031e3565b906000526020600020906009020160060160149054906101000a900460ff16801562001dd85750600382828154811062001d455762001d45620031e3565b6000918252602091829020600760099092020101546040805163afe0104360e01b815290516001600160a01b039092169263afe01043926004808401938290030181865afa15801562001d9c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001dc2919062003512565b600481111562001dd65762001dd6620034fc565b145b156200206d5781818154811062001df35762001df3620031e3565b9060005260206000209060090201604051806101400160405290816000820154815260200160018201805462001e299062003224565b80601f016020809104026020016040519081016040528092919081815260200182805462001e579062003224565b801562001ea85780601f1062001e7c5761010080835404028352916020019162001ea8565b820191906000526020600020905b81548152906001019060200180831162001e8a57829003601f168201915b5050505050815260200160028201805462001ec39062003224565b80601f016020809104026020016040519081016040528092919081815260200182805462001ef19062003224565b801562001f425780601f1062001f165761010080835404028352916020019162001f42565b820191906000526020600020905b81548152906001019060200180831162001f2457829003601f168201915b505050505081526020016003820154815260200160048201805462001f679062003224565b80601f016020809104026020016040519081016040528092919081815260200182805462001f959062003224565b801562001fe65780601f1062001fba5761010080835404028352916020019162001fe6565b820191906000526020600020905b81548152906001019060200180831162001fc857829003601f168201915b50505091835250506005820154602082015260068201546001600160a01b038082166040840152600160a01b90910460ff161515606083015260078301548116608083015260089092015490911660a0909101528451859087908110620020515762002051620031e3565b6020026020010181905250848062002069906200338f565b9550505b60010162001ce8565b505060010162001c9b565b6001600160a01b03831660009081526020819052604081209080805b8354811015620020eb5787848281548110620020bd57620020bd620031e3565b90600052602060002090600902016000015403620020e25760019250809150620020eb565b6001016200209d565b50816200210c5760405162461bcd60e51b81526004016200028390620033ab565b828181548110620021215762002121620031e3565b906000526020600020906009020160060160149054906101000a900460ff166200218e5760405162461bcd60e51b815260206004820152601d60248201527f4974656d206861737373206e6f74206265656e20707572636861736564000000604482015260640162000283565b336001600160a01b0316838281548110620021ad57620021ad620031e3565b60009182526020909120600660099092020101546001600160a01b031614620022255760405162461bcd60e51b815260206004820152602360248201527f4f6e6c79207468652062757965722063616e2063616e63656c20746865206f726044820152623232b960e91b606482015260840162000283565b8281815481106200223a576200223a620031e3565b60009182526020918290206007600990920201015460408051635b0222bb60e01b815290516001600160a01b0390921692635b0222bb926004808401938290030181865afa15801562002291573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620022b7919062003535565b620022c490603c6200354f565b421115620023155760405162461bcd60e51b815260206004820152601f60248201527f43616e63656c6c6174696f6e20706572696f6420686173206578706972656400604482015260640162000283565b60008382815481106200232c576200232c620031e3565b906000526020600020906009020160060160146101000a81548160ff02191690831515021790555060008382815481106200236b576200236b620031e3565b906000526020600020906009020160060160006101000a8154816001600160a01b0302191690836001600160a01b031602179055506000838281548110620023b757620023b7620031e3565b6000918252602091829020600990910201600701546040516001600160a01b039091163180825292507f5e43e6c33b0654c056b16044ddccf17d9e1da06a6523e75be8f7133f80e2345e910160405180910390a16040516001600160a01b0388163181527f64f94cc1b9db4414f5017add39d53fc2644d66038e8c0ea3c887e90730075da89060200160405180910390a1851515600103620024d857838281548110620024685762002468620031e3565b60009182526020822060076009909202010154604080516317cd970760e31b815290516001600160a01b039092169263be6cb8389260048084019382900301818387803b158015620024b957600080fd5b505af1158015620024ce573d6000803e3d6000fd5b5050505062002560565b838281548110620024ed57620024ed620031e3565b60009182526020909120600990910201600701546040516344f0f41560e11b815286151560048201526001600160a01b03909116906389e1e82a90602401600060405180830381600087803b1580156200254657600080fd5b505af11580156200255b573d6000803e3d6000fd5b505050505b6000848381548110620025775762002577620031e3565b6000918252602091829020600990910201600701546040516001600160a01b039091163180825292507f5e43e6c33b0654c056b16044ddccf17d9e1da06a6523e75be8f7133f80e2345e910160405180910390a16000858481548110620025e257620025e2620031e3565b906000526020600020906009020160070160006101000a8154816001600160a01b0302191690836001600160a01b031602179055507ff69c7ea3f71dad86e17ba97a88b7e8f1708c0946bd98c7584e9942f60da8728e89336040516200265b9291909182526001600160a01b0316602082015260400190565b60405180910390a16040516001600160a01b0389163181527f64f94cc1b9db4414f5017add39d53fc2644d66038e8c0ea3c887e90730075da89060200160405180910390a1620026ef6040518060400160405280601881526020017f4f726465722063616e63656c65643a202573206279202573000000000000000081525086858154811062000c555762000c55620031e3565b505050505050505050565b606060008060005b6002548110156200279e57336001600160a01b0316600282815481106200272d576200272d620031e3565b6000918252602090912001546001600160a01b031614620027955760008060028381548110620027615762002761620031e3565b60009182526020808320909101546001600160a01b031683528201929092526040019020546200279290846200354f565b92505b60010162002702565b5060008267ffffffffffffffff811115620027bd57620027bd62002d7f565b604051908082528060200260200182016040528015620027fa57816020015b620027e662002ca7565b815260200190600190039081620027dc5790505b50905060005b60025481101562002b6f57336001600160a01b0316600282815481106200282b576200282b620031e3565b6000918252602090912001546001600160a01b03161462002b6657600080600060028481548110620028615762002861620031e3565b60009182526020808320909101546001600160a01b03168352820192909252604001812091505b815481101562002b6357818181548110620028a757620028a7620031e3565b906000526020600020906009020160060160149054906101000a900460ff1662002b5a57818181548110620028e057620028e0620031e3565b90600052602060002090600902016040518061014001604052908160008201548152602001600182018054620029169062003224565b80601f0160208091040260200160405190810160405280929190818152602001828054620029449062003224565b8015620029955780601f10620029695761010080835404028352916020019162002995565b820191906000526020600020905b8154815290600101906020018083116200297757829003601f168201915b50505050508152602001600282018054620029b09062003224565b80601f0160208091040260200160405190810160405280929190818152602001828054620029de9062003224565b801562002a2f5780601f1062002a035761010080835404028352916020019162002a2f565b820191906000526020600020905b81548152906001019060200180831162002a1157829003601f168201915b505050505081526020016003820154815260200160048201805462002a549062003224565b80601f016020809104026020016040519081016040528092919081815260200182805462002a829062003224565b801562002ad35780601f1062002aa75761010080835404028352916020019162002ad3565b820191906000526020600020905b81548152906001019060200180831162002ab557829003601f168201915b50505091835250506005820154602082015260068201546001600160a01b038082166040840152600160a01b90910460ff161515606083015260078301548116608083015260089092015490911660a090910152845185908790811062002b3e5762002b3e620031e3565b6020026020010181905250848062002b56906200338f565b9550505b60010162002888565b50505b60010162002800565b5062002ba16040518060400160405280600d81526020016c02a37ba30b61024ba32b6b99d1609d1b8152508462002bdb565b62002bd46040518060400160405280600f81526020016e021bab93932b73a1024b73232bc1d1608d1b8152508362002bdb565b9392505050565b62002c24828260405160240162002bf492919062003565565b60408051601f198184030181529190526020810180516001600160e01b0316632d839cb360e21b17905262002c78565b5050565b62002c7383838360405160240162002c439392919062003589565b60408051601f198184030181529190526020810180516001600160e01b03166395ed019560e01b17905262002c78565b505050565b62002c838162002c86565b50565b60006a636f6e736f6c652e6c6f679050600080835160208501845afa505050565b60405180610140016040528060008152602001606081526020016060815260200160008152602001606081526020016000815260200160006001600160a01b0316815260200160001515815260200160006001600160a01b0316815260200160006001600160a01b031681525090565b50805462002d259062003224565b6000825580601f1062002d36575050565b601f01602090049060005260206000209081019062002c83919062002d64565b61195180620035cc83390190565b5b8082111562002d7b576000815560010162002d65565b5090565b634e487b7160e01b600052604160045260246000fd5b600082601f83011262002da757600080fd5b813567ffffffffffffffff8082111562002dc55762002dc562002d7f565b604051601f8301601f19908116603f0116810190828211818310171562002df05762002df062002d7f565b8160405283815286602085880101111562002e0a57600080fd5b836020870160208301376000602085830101528094505050505092915050565b600080600080600060a0868803121562002e4357600080fd5b85359450602086013567ffffffffffffffff8082111562002e6357600080fd5b62002e7189838a0162002d95565b9550604088013591508082111562002e8857600080fd5b62002e9689838a0162002d95565b945060608801359350608088013591508082111562002eb457600080fd5b5062002ec38882890162002d95565b9150509295509295909350565b6000806000806080858703121562002ee757600080fd5b843567ffffffffffffffff8082111562002f0057600080fd5b62002f0e8883890162002d95565b9550602087013591508082111562002f2557600080fd5b62002f338883890162002d95565b945060408701359350606087013591508082111562002f5157600080fd5b5062002f608782880162002d95565b91505092959194509250565b6000815180845260005b8181101562002f945760208185018101518683018201520162002f76565b506000602082860101526020601f19601f83011685010191505092915050565b600060208083018184528085518083526040925060408601915060408160051b87010184880160005b83811015620030bf57603f1989840301855281516101408151855288820151818a8701526200300f8287018262002f6c565b915050878201518582038987015262003029828262002f6c565b91505060608083015181870152506080808301518683038288015262003050838262002f6c565b9250505060a080830151818701525060c0808301516200307a828801826001600160a01b03169052565b505060e082810151151590860152610100808301516001600160a01b039081169187019190915261012092830151169190940152938601939086019060010162002fdd565b509098975050505050505050565b60008060408385031215620030e157600080fd5b82359150602083013567ffffffffffffffff8111156200310057600080fd5b6200310e8582860162002d95565b9150509250929050565b6000602082840312156200312b57600080fd5b5035919050565b80356001600160a01b03811681146200314a57600080fd5b919050565b600080604083850312156200316357600080fd5b82359150620031756020840162003132565b90509250929050565b803580151581146200314a57600080fd5b60008060008060808587031215620031a657600080fd5b84359350620031b86020860162003132565b9250620031c8604086016200317e565b9150620031d8606086016200317e565b905092959194509250565b634e487b7160e01b600052603260045260246000fd5b602080825260119082015270125d195b48185b1c9958591e481cdbdb19607a1b604082015260600190565b600181811c908216806200323957607f821691505b6020821081036200325a57634e487b7160e01b600052602260045260246000fd5b50919050565b601f82111562002c73576000816000526020600020601f850160051c810160208610156200328b5750805b601f850160051c820191505b81811015620013ba5782815560010162003297565b815167ffffffffffffffff811115620032c957620032c962002d7f565b620032e181620032da845462003224565b8462003260565b602080601f831160018114620033195760008415620033005750858301515b600019600386901b1c1916600185901b178555620013ba565b600085815260208120601f198616915b828110156200334a5788860151825594840194600190910190840162003329565b5085821015620033695787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b634e487b7160e01b600052601160045260246000fd5b600060018201620033a457620033a462003379565b5060010190565b6020808252600e908201526d125d195b481b9bdd08199bdd5b9960921b604082015260600190565b60208152600062002bd4602083018462002f6c565b81810381811115620033fe57620033fe62003379565b92915050565b81810362003410575050565b6200341c825462003224565b67ffffffffffffffff81111562003437576200343762002d7f565b6200344881620032da845462003224565b6000601f8211600181146200347f5760008315620034665750848201545b600019600385901b1c1916600184901b17845562000cfe565b600085815260209020601f19841690600086815260209020845b83811015620034bb578286015482556001958601959091019060200162003499565b5085831015620033695793015460001960f8600387901b161c19169092555050600190811b01905550565b634e487b7160e01b600052603160045260246000fd5b634e487b7160e01b600052602160045260246000fd5b6000602082840312156200352557600080fd5b81516005811062002bd457600080fd5b6000602082840312156200354857600080fd5b5051919050565b80820180821115620033fe57620033fe62003379565b6040815260006200357a604083018562002f6c565b90508260208301529392505050565b6060815260006200359e606083018662002f6c565b8281036020840152620035b2818662002f6c565b91505060018060a01b038316604083015294935050505056fe60806040526040516200195138038062001951833981016040819052620000269162000124565b60018054600280546001600160a01b038581166001600160a01b03199283161790925560038054909116736a7d3230514ee0e8078f23cf65b367d9984b055a17905584166101000260ff199081166001600160a81b0319909216919091178255600580549091169055426000908155600480549283018155905260408051808201909152600c81526b24ba32b6903137bab3b43a1760a11b60208201527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b90910190620000f4908262000203565b50506008805460ff1916905550620002cf565b80516001600160a01b03811681146200011f57600080fd5b919050565b600080604083850312156200013857600080fd5b620001438362000107565b9150620001536020840162000107565b90509250929050565b634e487b7160e01b600052604160045260246000fd5b600181811c908216806200018757607f821691505b602082108103620001a857634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620001fe576000816000526020600020601f850160051c81016020861015620001d95750805b601f850160051c820191505b81811015620001fa57828155600101620001e5565b5050505b505050565b81516001600160401b038111156200021f576200021f6200015c565b620002378162000230845462000172565b84620001ae565b602080601f8311600181146200026f5760008415620002565750858301515b600019600386901b1c1916600185901b178555620001fa565b600085815260208120601f198616915b82811015620002a0578886015182559484019460019091019084016200027f565b5085821015620002bf5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b61167280620002df6000396000f3fe6080604052600436106100fe5760003560e01c80638285074b11610095578063c00ccd5411610064578063c00ccd541461027e578063d16f5b291461029e578063dd3fa136146102c8578063df8d93b4146102e8578063eaaf0b63146102fd57600080fd5b80638285074b1461021c57806389e1e82a1461023c578063afe010431461024f578063be6cb8381461027657600080fd5b80635b0222bb116100d15780635b0222bb1461019e5780635e10177b146101c257806364e6aa52146101d75780637150d8ae146101f757600080fd5b806308551a53146101035780631865c57d1461014057806319561dae146101655780634fd6137c14610187575b600080fd5b34801561010f57600080fd5b50600254610123906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561014c57600080fd5b50610155610321565b60405161013794939291906111d1565b34801561017157600080fd5b5061017a6104f0565b6040516101379190611222565b34801561019357600080fd5b5061019c61057e565b005b3480156101aa57600080fd5b506101b460005481565b604051908152602001610137565b3480156101ce57600080fd5b5061019c61069f565b3480156101e357600080fd5b5061017a6101f236600461123c565b6107d7565b34801561020357600080fd5b506001546101239061010090046001600160a01b031681565b34801561022857600080fd5b5061019c61023736600461126b565b610802565b61019c61024a36600461131c565b610931565b34801561025b57600080fd5b506001546102699060ff1681565b604051610137919061133e565b61019c610afe565b34801561028a57600080fd5b5061019c61029936600461126b565b610c86565b3480156102aa57600080fd5b506008546102b89060ff1681565b6040519015158152602001610137565b3480156102d457600080fd5b5061019c6102e336600461126b565b610d88565b3480156102f457600080fd5b5061017a610f45565b34801561030957600080fd5b50610312610f52565b60405161013793929190611352565b60006060806060600160009054906101000a900460ff1660096006600782805461034a906113de565b80601f0160208091040260200160405190810160405280929190818152602001828054610376906113de565b80156103c35780601f10610398576101008083540402835291602001916103c3565b820191906000526020600020905b8154815290600101906020018083116103a657829003601f168201915b505050505092508180546103d6906113de565b80601f0160208091040260200160405190810160405280929190818152602001828054610402906113de565b801561044f5780601f106104245761010080835404028352916020019161044f565b820191906000526020600020905b81548152906001019060200180831161043257829003601f168201915b50505050509150808054610462906113de565b80601f016020809104026020016040519081016040528092919081815260200182805461048e906113de565b80156104db5780601f106104b0576101008083540402835291602001916104db565b820191906000526020600020905b8154815290600101906020018083116104be57829003601f168201915b50505050509050935093509350935090919293565b600680546104fd906113de565b80601f0160208091040260200160405190810160405280929190818152602001828054610529906113de565b80156105765780601f1061054b57610100808354040283529160200191610576565b820191906000526020600020905b81548152906001019060200180831161055957829003601f168201915b505050505081565b60015461010090046001600160a01b031633146105b65760405162461bcd60e51b81526004016105ad90611418565b60405180910390fd5b6001805460ff1660048111156105ce576105ce611153565b146106255760405162461bcd60e51b815260206004820152602160248201527f43616e6e6f74206f70656e2064697370757465206174207468697320737461676044820152606560f81b60648201526084016105ad565b6001805460ff199081166003178255600880549091168217905560048054918201815560005260408051808201909152601c81527f44697370757465206f70656e6564206279207468652062757965722e0000000060208201526000805160206115f48339815191529091019061069c90826114a0565b50565b60015461010090046001600160a01b031633146106ce5760405162461bcd60e51b81526004016105ad90611418565b6001805460ff1660048111156106e6576106e6611153565b146107335760405162461bcd60e51b815260206004820152601760248201527f43616e6e6f7420636f6e6669726d2064656c697665727900000000000000000060448201526064016105ad565b6002546040516001600160a01b03909116904780156108fc02916000818181858888f1935050505015801561076c573d6000803e3d6000fd5b506001805460ff1916600217815560048054918201815560005260408051808201909152601b81527f4974656d207265636965766564206279207468652062757965722e000000000060208201526000805160206115f48339815191529091019061069c90826114a0565b600481815481106107e757600080fd5b9060005260206000200160009150905080546104fd906113de565b60015461010090046001600160a01b031633146108315760405162461bcd60e51b81526004016105ad90611418565b600360015460ff16600481111561084a5761084a611153565b146108675760405162461bcd60e51b81526004016105ad90611560565b60078054610874906113de565b1590506108c35760405162461bcd60e51b815260206004820181905260248201527f50726f6f6620616c7265616479207375626d697474656420627920627579657260448201526064016105ad565b6000600680546108d2906113de565b9050116109215760405162461bcd60e51b815260206004820152601e60248201527f53656c6c6572206d757374207375626d69742070726f6f66206669727374000060448201526064016105ad565b600761092d82826114a0565b5050565b6003546001600160a01b031633146109975760405162461bcd60e51b8152602060048201526024808201527f4f6e6c792061726269747261746f722063616e2063616c6c2074686973206d656044820152631d1a1bd960e21b60648201526084016105ad565b600360015460ff1660048111156109b0576109b0611153565b146109cd5760405162461bcd60e51b81526004016105ad90611560565b8015610a60576001546040516001600160a01b0361010090920491909116904780156108fc02916000818181858888f19350505050158015610a13573d6000803e3d6000fd5b50600480546001810182556000918252604080516060810190915260238082526000805160206115f483398151915290920192916115d16020830139610a5a9150826114a0565b50610ae2565b6002546040516001600160a01b03909116904780156108fc02916000818181858888f19350505050158015610a99573d6000803e3d6000fd5b50600480546001810182556000918252604080516060810190915260248082526000805160206115f483398151915290920192916115ad6020830139610ae09150826114a0565b505b506001805460ff19908116600417909155600880549091169055565b600060015460ff166004811115610b1757610b17611153565b14610b985760405162461bcd60e51b8152602060048201526044602482018190527f43616e6e6f7420726566756e642e204974656d2068617320616c726561647920908201527f6265656e2073686970706564206f7220697320696e20616e6f7468657220737460648201526330ba329760e11b608482015260a4016105ad565b600054610ba690603c61158b565b4210610bf45760405162461bcd60e51b815260206004820152601f60248201527f43616e63656c6c6174696f6e20706572696f6420686173207061737365642e0060448201526064016105ad565b6001546040516001600160a01b0361010090920491909116904780156108fc02916000818181858888f19350505050158015610c34573d6000803e3d6000fd5b506001805460ff191660049081178255805491820181556000908152604080516060810190915260298082526000805160206115f483398151915290930192611614602083013961069c9150826114a0565b6002546001600160a01b03163314610ce05760405162461bcd60e51b815260206004820181905260248201527f4f6e6c792073656c6c65722063616e2063616c6c2074686973206d6574686f6460448201526064016105ad565b600360015460ff166004811115610cf957610cf9611153565b14610d165760405162461bcd60e51b81526004016105ad90611560565b60068054610d23906113de565b159050610d7c5760405162461bcd60e51b815260206004820152602160248201527f50726f6f6620616c7265616479207375626d69747465642062792073656c6c656044820152603960f91b60648201526084016105ad565b600661092d82826114a0565b6002546001600160a01b03163314610de25760405162461bcd60e51b815260206004820181905260248201527f4f6e6c792073656c6c65722063616e2063616c6c2074686973206d6574686f6460448201526064016105ad565b600060015460ff166004811115610dfb57610dfb611153565b14610e485760405162461bcd60e51b815260206004820152601e60248201527f43616e6e6f7420736869702e20496e636f7272656374207374617475732e000060448201526064016105ad565b600054610e5690603c61158b565b421015610ecb5760405162461bcd60e51b815260206004820152603d60248201527f43616e6e6f742073686970206265666f7265203135206d696e7574652063616e60448201527f63656c6c6174696f6e20706572696f642068617320656c61707365642e00000060648201526084016105ad565b6001805460ff1916811790556009610ee382826114a0565b506004805460018101825560009190915260408051808201909152601881527f4974656d2073656e74206279207468652073656c6c65722e000000000000000060208201526000805160206115f48339815191529091019061092d90826114a0565b600780546104fd906113de565b606080606060046006600782805480602002602001604051908101604052809291908181526020016000905b8282101561102a578382906000526020600020018054610f9d906113de565b80601f0160208091040260200160405190810160405280929190818152602001828054610fc9906113de565b80156110165780601f10610feb57610100808354040283529160200191611016565b820191906000526020600020905b815481529060010190602001808311610ff957829003601f168201915b505050505081526020019060010190610f7e565b50505050925081805461103c906113de565b80601f0160208091040260200160405190810160405280929190818152602001828054611068906113de565b80156110b55780601f1061108a576101008083540402835291602001916110b5565b820191906000526020600020905b81548152906001019060200180831161109857829003601f168201915b505050505091508080546110c8906113de565b80601f01602080910402602001604051908101604052809291908181526020018280546110f4906113de565b80156111415780601f1061111657610100808354040283529160200191611141565b820191906000526020600020905b81548152906001019060200180831161112457829003601f168201915b50505050509050925092509250909192565b634e487b7160e01b600052602160045260246000fd5b6005811061118757634e487b7160e01b600052602160045260246000fd5b9052565b6000815180845260005b818110156111b157602081850181015186830182015201611195565b506000602082860101526020601f19601f83011685010191505092915050565b6111db8186611169565b6080602082015260006111f1608083018661118b565b8281036040840152611203818661118b565b90508281036060840152611217818561118b565b979650505050505050565b602081526000611235602083018461118b565b9392505050565b60006020828403121561124e57600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b60006020828403121561127d57600080fd5b813567ffffffffffffffff8082111561129557600080fd5b818401915084601f8301126112a957600080fd5b8135818111156112bb576112bb611255565b604051601f8201601f19908116603f011681019083821181831017156112e3576112e3611255565b816040528281528760208487010111156112fc57600080fd5b826020860160208301376000928101602001929092525095945050505050565b60006020828403121561132e57600080fd5b8135801515811461123557600080fd5b6020810161134c8284611169565b92915050565b6000606082016060835280865180835260808501915060808160051b8601019250602080890160005b838110156113a957607f1988870301855261139786835161118b565b9550938201939082019060010161137b565b505050505082810360208401526113c0818661118b565b905082810360408401526113d4818561118b565b9695505050505050565b600181811c908216806113f257607f821691505b60208210810361141257634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252601f908201527f4f6e6c792062757965722063616e2063616c6c2074686973206d6574686f6400604082015260600190565b601f82111561149b576000816000526020600020601f850160051c810160208610156114785750805b601f850160051c820191505b8181101561149757828155600101611484565b5050505b505050565b815167ffffffffffffffff8111156114ba576114ba611255565b6114ce816114c884546113de565b8461144f565b602080601f83116001811461150357600084156114eb5750858301515b600019600386901b1c1916600185901b178555611497565b600085815260208120601f198616915b8281101561153257888601518255948401946001909101908401611513565b50858210156115505787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6020808252601190820152704e6f20616374697665206469737075746560781b604082015260600190565b8082018082111561134c57634e487b7160e01b600052601160045260246000fdfe4469737075746520636c6f7365642e2053656c6c65722077617320726566756e6465642e4469737075746520636c6f7365642e2042757965722077617320726566756e6465642e8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b4974656d2063616e63656c6c656420616e6420726566756e64656420746f207468652062757965722ea2646970667358221220b1ff31f288d9595ec552e1c4b4ada91a4178bde62f8a4f78a2332d31c507424464736f6c63430008180033a264697066735822122013fced70b5cac64a49f5d0a37543b7b127920b662340adecf82858bcaf0f62c664736f6c63430008180033",
  "deployedBytecode": "0x608060405260043610620000b55760003560e01c80638af8a986116200006c5780638af8a98614620001975780639ab7e23b14620001af578063b24db86f14620001c7578063ba30154114620001df578063dbc3767014620001f6578063e2c03ace146200020e57600080fd5b80630461459a14620000ba57806313df81d614620000e157806338f5234f14620001065780634d25ce471462000136578063654fc833146200015b5780637bfe9efd1462000180575b600080fd5b348015620000c757600080fd5b50620000df620000d936600462002e2a565b62000235565b005b348015620000ee57600080fd5b50620000df6200010036600462002ed0565b62000463565b3480156200011357600080fd5b506200011e62000640565b6040516200012d919062002fb4565b60405180910390f35b3480156200014357600080fd5b50620000df62000155366004620030cd565b620009fb565b3480156200016857600080fd5b50620000df6200017a36600462003118565b62000d05565b620000df620001913660046200314f565b6200100b565b348015620001a457600080fd5b506200011e620013c2565b348015620001bc57600080fd5b506200011e6200182d565b348015620001d457600080fd5b506200011e62001aca565b620000df620001f03660046200318f565b62002081565b3480156200020357600080fd5b506200011e620026fa565b3480156200021b57600080fd5b506200022660015481565b6040519081526020016200012d565b6000851180156200024857506001548511155b6200028c5760405162461bcd60e51b815260206004820152600f60248201526e125b9d985b1a59081a5d195b481251608a1b60448201526064015b60405180910390fd5b33600090815260208190526040812090805b82548110156200040a5787838281548110620002be57620002be620031e3565b90600052602060002090600902016000015403620004015760019150828181548110620002ef57620002ef620031e3565b906000526020600020906009020160060160149054906101000a900460ff16156200032e5760405162461bcd60e51b81526004016200028390620031f9565b86838281548110620003445762000344620031e3565b90600052602060002090600902016001019081620003639190620032ac565b50858382815481106200037a576200037a620031e3565b90600052602060002090600902016002019081620003999190620032ac565b5084838281548110620003b057620003b0620031e3565b90600052602060002090600902016003018190555083838281548110620003db57620003db620031e3565b90600052602060002090600902016004019081620003fa9190620032ac565b506200040a565b6001016200029e565b50806200045a5760405162461bcd60e51b815260206004820152601e60248201527f4974656d20646f6573206e6f742062656c6f6e6720746f2073656e6465720000604482015260640162000283565b50505050505050565b620004936040518060400160405280600c81526020016b50726963652069733a20257360a01b8152508362002bdb565b336000908152602081905260408120549003620004ed57600280546001810182556000919091527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace0180546001600160a01b031916331790555b60018054906000620004ff836200338f565b9091555050336000818152602081815260408083208151610140810183526001805482528185018b81529382018a905260608201899052608082018890524260a083015260c0820186905260e082018690526101008201869052610120820196909652815480870183559185529290932082516009909402019283555190928201906200058d9082620032ac565b5060408201516002820190620005a49082620032ac565b506060820151600382015560808201516004820190620005c59082620032ac565b5060a0820151600582015560c082015160068201805460e08501511515600160a01b026001600160a81b03199091166001600160a01b03938416171790556101008301516007830180549183166001600160a01b03199283161790556101209093015160089092018054929091169190921617905550505050565b336000908152602081905260408120606091908190815b8154811015620006b457818181548110620006765762000676620031e3565b906000526020600020906009020160060160149054906101000a900460ff1615620006ab5783620006a7816200338f565b9450505b60010162000657565b5060008367ffffffffffffffff811115620006d357620006d362002d7f565b6040519080825280602002602001820160405280156200071057816020015b620006fc62002ca7565b815260200190600190039081620006f25790505b50905060005b8254811015620009f257828181548110620007355762000735620031e3565b906000526020600020906009020160060160149054906101000a900460ff1615620009e9578281815481106200076f576200076f620031e3565b90600052602060002090600902016040518061014001604052908160008201548152602001600182018054620007a59062003224565b80601f0160208091040260200160405190810160405280929190818152602001828054620007d39062003224565b8015620008245780601f10620007f85761010080835404028352916020019162000824565b820191906000526020600020905b8154815290600101906020018083116200080657829003601f168201915b505050505081526020016002820180546200083f9062003224565b80601f01602080910402602001604051908101604052809291908181526020018280546200086d9062003224565b8015620008be5780601f106200089257610100808354040283529160200191620008be565b820191906000526020600020905b815481529060010190602001808311620008a057829003601f168201915b5050505050815260200160038201548152602001600482018054620008e39062003224565b80601f0160208091040260200160405190810160405280929190818152602001828054620009119062003224565b8015620009625780601f10620009365761010080835404028352916020019162000962565b820191906000526020600020905b8154815290600101906020018083116200094457829003601f168201915b50505091835250506005820154602082015260068201546001600160a01b038082166040840152600160a01b90910460ff161515606083015260078301548116608083015260089092015490911660a0909101528251839086908110620009cd57620009cd620031e3565b60200260200101819052508380620009e5906200338f565b9450505b60010162000716565b50949350505050565b3360009081526020819052604081209080805b835481101562000a5c578584828154811062000a2e5762000a2e620031e3565b9060005260206000209060090201600001540362000a53576001925080915062000a5c565b60010162000a0e565b508162000a7d5760405162461bcd60e51b81526004016200028390620033ab565b82818154811062000a925762000a92620031e3565b906000526020600020906009020160060160149054906101000a900460ff1662000aff5760405162461bcd60e51b815260206004820152601b60248201527f4974656d20686173206e6f74206265656e207075726368617365640000000000604482015260640162000283565b82818154811062000b145762000b14620031e3565b60009182526020909120600990910201600801546001600160a01b0316331462000b815760405162461bcd60e51b815260206004820152601e60248201527f4f6e6c792073656c6c65722063616e20736869702074686973206974656d0000604482015260640162000283565b82818154811062000b965762000b96620031e3565b6000918252602090912060076009909202010154604051636e9fd09b60e11b81526001600160a01b039091169063dd3fa1369062000bd9908790600401620033d3565b600060405180830381600087803b15801562000bf457600080fd5b505af115801562000c09573d6000803e3d6000fd5b5050505062000cfe604051806040016040528060168152602001754974656d20736869707065643a20257320627920257360501b81525084838154811062000c555762000c55620031e3565b9060005260206000209060090201600101805462000c739062003224565b80601f016020809104026020016040519081016040528092919081815260200182805462000ca19062003224565b801562000cf25780601f1062000cc65761010080835404028352916020019162000cf2565b820191906000526020600020905b81548152906001019060200180831162000cd457829003601f168201915b50505050503362002c28565b5050505050565b3360009081526020819052604081209080805b835481101562000dba578484828154811062000d385762000d38620031e3565b9060005260206000209060090201600001540362000db15783818154811062000d655762000d65620031e3565b906000526020600020906009020160060160149054906101000a900460ff161562000da45760405162461bcd60e51b81526004016200028390620031f9565b6001925080915062000dba565b60010162000d18565b508162000e005760405162461bcd60e51b8152602060048201526013602482015272125d195b48191bd95cc81b9bdd08195e1a5cdd606a1b604482015260640162000283565b825460009062000e1390600190620033e8565b905080821462000f625783818154811062000e325762000e32620031e3565b906000526020600020906009020184838154811062000e555762000e55620031e3565b60009182526020909120825460099092020190815560018082019062000e7e9084018262003404565b5060028181019062000e939084018262003404565b50600382015481600301556004820181600401908162000eb4919062003404565b50600582810154908201556006808301805491830180546001600160a01b03198082166001600160a01b039586169081178455935460ff600160a01b91829004161515026001600160a81b03199092169093171790556007808501549084018054831691841691909117905560089384015493909201805490921692169190911790558354859085908490811062000f505762000f50620031e3565b60009182526020909120600990910201555b8380548062000f755762000f75620034e6565b6000828152602081206009600019909301928302018181559062000f9d600183018262002d17565b62000fad60028301600062002d17565b600382016000905560048201600062000fc7919062002d17565b50600060058201556006810180546001600160a81b03191690556007810180546001600160a01b031990811690915560089091018054909116905590555050505050565b6000821180156200101e57506001548211155b6200105e5760405162461bcd60e51b815260206004820152600f60248201526e125b9d985b1a59081a5d195b481251608a1b604482015260640162000283565b6001600160a01b03811660009081526020819052604081209080805b8354811015620010c857858482815481106200109a576200109a620031e3565b90600052602060002090600902016000015403620010bf5760019250809150620010c8565b6001016200107a565b5081620010e95760405162461bcd60e51b81526004016200028390620033ab565b828181548110620010fe57620010fe620031e3565b906000526020600020906009020160060160149054906101000a900460ff16156200113d5760405162461bcd60e51b81526004016200028390620031f9565b836001600160a01b03168382815481106200115c576200115c620031e3565b60009182526020909120600860099092020101546001600160a01b031614620011c85760405162461bcd60e51b815260206004820152601b60248201527f4f776e65722063616e206e6f742062757920746865206974656d2e0000000000604482015260640162000283565b828181548110620011dd57620011dd620031e3565b90600052602060002090600902016003015434146200124b5760405162461bcd60e51b815260206004820152602360248201527f496e636f727265637420616d6f756e74206f662065746865722f776569207365604482015262373a1760e91b606482015260840162000283565b60003433866040516200125e9062002d56565b6001600160a01b039283168152911660208201526040016040518091039082f090508015801562001293573d6000803e3d6000fd5b50905033848381548110620012ac57620012ac620031e3565b906000526020600020906009020160060160006101000a8154816001600160a01b0302191690836001600160a01b031602179055506001848381548110620012f857620012f8620031e3565b906000526020600020906009020160060160146101000a81548160ff02191690831515021790555080848381548110620013365762001336620031e3565b906000526020600020906009020160070160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550620013ba6040518060400160405280601881526020017f4974656d207075726368617365643a202573206279202573000000000000000081525085848154811062000c555762000c55620031e3565b505050505050565b606060008060005b6002548110156200148757600080600060028481548110620013f057620013f0620031e3565b60009182526020808320909101546001600160a01b03168352820192909252604001812091505b81548110156200147c57336001600160a01b0316828281548110620014405762001440620031e3565b60009182526020909120600660099092020101546001600160a01b0316036200147357846200146f816200338f565b9550505b60010162001417565b5050600101620013ca565b5060008267ffffffffffffffff811115620014a657620014a662002d7f565b604051908082528060200260200182016040528015620014e357816020015b620014cf62002ca7565b815260200190600190039081620014c55790505b50905060005b60025481101562001825576000806000600284815481106200150f576200150f620031e3565b60009182526020808320909101546001600160a01b03168352820192909252604001812091505b81548110156200181a57336001600160a01b03168282815481106200155f576200155f620031e3565b60009182526020909120600660099092020101546001600160a01b0316036200181157818181548110620015975762001597620031e3565b90600052602060002090600902016040518061014001604052908160008201548152602001600182018054620015cd9062003224565b80601f0160208091040260200160405190810160405280929190818152602001828054620015fb9062003224565b80156200164c5780601f1062001620576101008083540402835291602001916200164c565b820191906000526020600020905b8154815290600101906020018083116200162e57829003601f168201915b50505050508152602001600282018054620016679062003224565b80601f0160208091040260200160405190810160405280929190818152602001828054620016959062003224565b8015620016e65780601f10620016ba57610100808354040283529160200191620016e6565b820191906000526020600020905b815481529060010190602001808311620016c857829003601f168201915b50505050508152602001600382015481526020016004820180546200170b9062003224565b80601f0160208091040260200160405190810160405280929190818152602001828054620017399062003224565b80156200178a5780601f106200175e576101008083540402835291602001916200178a565b820191906000526020600020905b8154815290600101906020018083116200176c57829003601f168201915b50505091835250506005820154602082015260068201546001600160a01b038082166040840152600160a01b90910460ff161515606083015260078301548116608083015260089092015490911660a0909101528451859087908110620017f557620017f5620031e3565b602002602001018190525084806200180d906200338f565b9550505b60010162001536565b5050600101620014e9565b509392505050565b33600090815260208181526040808320805482518185028101850190935280835260609492939192909184015b8282101562001ac1578382906000526020600020906009020160405180610140016040529081600082015481526020016001820180546200189b9062003224565b80601f0160208091040260200160405190810160405280929190818152602001828054620018c99062003224565b80156200191a5780601f10620018ee576101008083540402835291602001916200191a565b820191906000526020600020905b815481529060010190602001808311620018fc57829003601f168201915b50505050508152602001600282018054620019359062003224565b80601f0160208091040260200160405190810160405280929190818152602001828054620019639062003224565b8015620019b45780601f106200198857610100808354040283529160200191620019b4565b820191906000526020600020905b8154815290600101906020018083116200199657829003601f168201915b5050505050815260200160038201548152602001600482018054620019d99062003224565b80601f016020809104026020016040519081016040528092919081815260200182805462001a079062003224565b801562001a585780601f1062001a2c5761010080835404028352916020019162001a58565b820191906000526020600020905b81548152906001019060200180831162001a3a57829003601f168201915b5050509183525050600582015460208083019190915260068301546001600160a01b038082166040850152600160a01b90910460ff161515606084015260078401548116608084015260089093015490921660a09091015290825260019290920191016200185a565b50505050905090565b606060008060005b60025481101562001c395760008060006002848154811062001af85762001af8620031e3565b60009182526020808320909101546001600160a01b03168352820192909252604001812091505b815481101562001c2e5781818154811062001b3e5762001b3e620031e3565b906000526020600020906009020160060160149054906101000a900460ff16801562001c0f5750600382828154811062001b7c5762001b7c620031e3565b6000918252602091829020600760099092020101546040805163afe0104360e01b815290516001600160a01b039092169263afe01043926004808401938290030181865afa15801562001bd3573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001bf9919062003512565b600481111562001c0d5762001c0d620034fc565b145b1562001c25578462001c21816200338f565b9550505b60010162001b1f565b505060010162001ad2565b5060008267ffffffffffffffff81111562001c585762001c5862002d7f565b60405190808252806020026020018201604052801562001c9557816020015b62001c8162002ca7565b81526020019060019003908162001c775790505b50905060005b600254811015620018255760008060006002848154811062001cc15762001cc1620031e3565b60009182526020808320909101546001600160a01b03168352820192909252604001812091505b8154811015620020765781818154811062001d075762001d07620031e3565b906000526020600020906009020160060160149054906101000a900460ff16801562001dd85750600382828154811062001d455762001d45620031e3565b6000918252602091829020600760099092020101546040805163afe0104360e01b815290516001600160a01b039092169263afe01043926004808401938290030181865afa15801562001d9c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001dc2919062003512565b600481111562001dd65762001dd6620034fc565b145b156200206d5781818154811062001df35762001df3620031e3565b9060005260206000209060090201604051806101400160405290816000820154815260200160018201805462001e299062003224565b80601f016020809104026020016040519081016040528092919081815260200182805462001e579062003224565b801562001ea85780601f1062001e7c5761010080835404028352916020019162001ea8565b820191906000526020600020905b81548152906001019060200180831162001e8a57829003601f168201915b5050505050815260200160028201805462001ec39062003224565b80601f016020809104026020016040519081016040528092919081815260200182805462001ef19062003224565b801562001f425780601f1062001f165761010080835404028352916020019162001f42565b820191906000526020600020905b81548152906001019060200180831162001f2457829003601f168201915b505050505081526020016003820154815260200160048201805462001f679062003224565b80601f016020809104026020016040519081016040528092919081815260200182805462001f959062003224565b801562001fe65780601f1062001fba5761010080835404028352916020019162001fe6565b820191906000526020600020905b81548152906001019060200180831162001fc857829003601f168201915b50505091835250506005820154602082015260068201546001600160a01b038082166040840152600160a01b90910460ff161515606083015260078301548116608083015260089092015490911660a0909101528451859087908110620020515762002051620031e3565b6020026020010181905250848062002069906200338f565b9550505b60010162001ce8565b505060010162001c9b565b6001600160a01b03831660009081526020819052604081209080805b8354811015620020eb5787848281548110620020bd57620020bd620031e3565b90600052602060002090600902016000015403620020e25760019250809150620020eb565b6001016200209d565b50816200210c5760405162461bcd60e51b81526004016200028390620033ab565b828181548110620021215762002121620031e3565b906000526020600020906009020160060160149054906101000a900460ff166200218e5760405162461bcd60e51b815260206004820152601d60248201527f4974656d206861737373206e6f74206265656e20707572636861736564000000604482015260640162000283565b336001600160a01b0316838281548110620021ad57620021ad620031e3565b60009182526020909120600660099092020101546001600160a01b031614620022255760405162461bcd60e51b815260206004820152602360248201527f4f6e6c79207468652062757965722063616e2063616e63656c20746865206f726044820152623232b960e91b606482015260840162000283565b8281815481106200223a576200223a620031e3565b60009182526020918290206007600990920201015460408051635b0222bb60e01b815290516001600160a01b0390921692635b0222bb926004808401938290030181865afa15801562002291573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620022b7919062003535565b620022c490603c6200354f565b421115620023155760405162461bcd60e51b815260206004820152601f60248201527f43616e63656c6c6174696f6e20706572696f6420686173206578706972656400604482015260640162000283565b60008382815481106200232c576200232c620031e3565b906000526020600020906009020160060160146101000a81548160ff02191690831515021790555060008382815481106200236b576200236b620031e3565b906000526020600020906009020160060160006101000a8154816001600160a01b0302191690836001600160a01b031602179055506000838281548110620023b757620023b7620031e3565b6000918252602091829020600990910201600701546040516001600160a01b039091163180825292507f5e43e6c33b0654c056b16044ddccf17d9e1da06a6523e75be8f7133f80e2345e910160405180910390a16040516001600160a01b0388163181527f64f94cc1b9db4414f5017add39d53fc2644d66038e8c0ea3c887e90730075da89060200160405180910390a1851515600103620024d857838281548110620024685762002468620031e3565b60009182526020822060076009909202010154604080516317cd970760e31b815290516001600160a01b039092169263be6cb8389260048084019382900301818387803b158015620024b957600080fd5b505af1158015620024ce573d6000803e3d6000fd5b5050505062002560565b838281548110620024ed57620024ed620031e3565b60009182526020909120600990910201600701546040516344f0f41560e11b815286151560048201526001600160a01b03909116906389e1e82a90602401600060405180830381600087803b1580156200254657600080fd5b505af11580156200255b573d6000803e3d6000fd5b505050505b6000848381548110620025775762002577620031e3565b6000918252602091829020600990910201600701546040516001600160a01b039091163180825292507f5e43e6c33b0654c056b16044ddccf17d9e1da06a6523e75be8f7133f80e2345e910160405180910390a16000858481548110620025e257620025e2620031e3565b906000526020600020906009020160070160006101000a8154816001600160a01b0302191690836001600160a01b031602179055507ff69c7ea3f71dad86e17ba97a88b7e8f1708c0946bd98c7584e9942f60da8728e89336040516200265b9291909182526001600160a01b0316602082015260400190565b60405180910390a16040516001600160a01b0389163181527f64f94cc1b9db4414f5017add39d53fc2644d66038e8c0ea3c887e90730075da89060200160405180910390a1620026ef6040518060400160405280601881526020017f4f726465722063616e63656c65643a202573206279202573000000000000000081525086858154811062000c555762000c55620031e3565b505050505050505050565b606060008060005b6002548110156200279e57336001600160a01b0316600282815481106200272d576200272d620031e3565b6000918252602090912001546001600160a01b031614620027955760008060028381548110620027615762002761620031e3565b60009182526020808320909101546001600160a01b031683528201929092526040019020546200279290846200354f565b92505b60010162002702565b5060008267ffffffffffffffff811115620027bd57620027bd62002d7f565b604051908082528060200260200182016040528015620027fa57816020015b620027e662002ca7565b815260200190600190039081620027dc5790505b50905060005b60025481101562002b6f57336001600160a01b0316600282815481106200282b576200282b620031e3565b6000918252602090912001546001600160a01b03161462002b6657600080600060028481548110620028615762002861620031e3565b60009182526020808320909101546001600160a01b03168352820192909252604001812091505b815481101562002b6357818181548110620028a757620028a7620031e3565b906000526020600020906009020160060160149054906101000a900460ff1662002b5a57818181548110620028e057620028e0620031e3565b90600052602060002090600902016040518061014001604052908160008201548152602001600182018054620029169062003224565b80601f0160208091040260200160405190810160405280929190818152602001828054620029449062003224565b8015620029955780601f10620029695761010080835404028352916020019162002995565b820191906000526020600020905b8154815290600101906020018083116200297757829003601f168201915b50505050508152602001600282018054620029b09062003224565b80601f0160208091040260200160405190810160405280929190818152602001828054620029de9062003224565b801562002a2f5780601f1062002a035761010080835404028352916020019162002a2f565b820191906000526020600020905b81548152906001019060200180831162002a1157829003601f168201915b505050505081526020016003820154815260200160048201805462002a549062003224565b80601f016020809104026020016040519081016040528092919081815260200182805462002a829062003224565b801562002ad35780601f1062002aa75761010080835404028352916020019162002ad3565b820191906000526020600020905b81548152906001019060200180831162002ab557829003601f168201915b50505091835250506005820154602082015260068201546001600160a01b038082166040840152600160a01b90910460ff161515606083015260078301548116608083015260089092015490911660a090910152845185908790811062002b3e5762002b3e620031e3565b6020026020010181905250848062002b56906200338f565b9550505b60010162002888565b50505b60010162002800565b5062002ba16040518060400160405280600d81526020016c02a37ba30b61024ba32b6b99d1609d1b8152508462002bdb565b62002bd46040518060400160405280600f81526020016e021bab93932b73a1024b73232bc1d1608d1b8152508362002bdb565b9392505050565b62002c24828260405160240162002bf492919062003565565b60408051601f198184030181529190526020810180516001600160e01b0316632d839cb360e21b17905262002c78565b5050565b62002c7383838360405160240162002c439392919062003589565b60408051601f198184030181529190526020810180516001600160e01b03166395ed019560e01b17905262002c78565b505050565b62002c838162002c86565b50565b60006a636f6e736f6c652e6c6f679050600080835160208501845afa505050565b60405180610140016040528060008152602001606081526020016060815260200160008152602001606081526020016000815260200160006001600160a01b0316815260200160001515815260200160006001600160a01b0316815260200160006001600160a01b031681525090565b50805462002d259062003224565b6000825580601f1062002d36575050565b601f01602090049060005260206000209081019062002c83919062002d64565b61195180620035cc83390190565b5b8082111562002d7b576000815560010162002d65565b5090565b634e487b7160e01b600052604160045260246000fd5b600082601f83011262002da757600080fd5b813567ffffffffffffffff8082111562002dc55762002dc562002d7f565b604051601f8301601f19908116603f0116810190828211818310171562002df05762002df062002d7f565b8160405283815286602085880101111562002e0a57600080fd5b836020870160208301376000602085830101528094505050505092915050565b600080600080600060a0868803121562002e4357600080fd5b85359450602086013567ffffffffffffffff8082111562002e6357600080fd5b62002e7189838a0162002d95565b9550604088013591508082111562002e8857600080fd5b62002e9689838a0162002d95565b945060608801359350608088013591508082111562002eb457600080fd5b5062002ec38882890162002d95565b9150509295509295909350565b6000806000806080858703121562002ee757600080fd5b843567ffffffffffffffff8082111562002f0057600080fd5b62002f0e8883890162002d95565b9550602087013591508082111562002f2557600080fd5b62002f338883890162002d95565b945060408701359350606087013591508082111562002f5157600080fd5b5062002f608782880162002d95565b91505092959194509250565b6000815180845260005b8181101562002f945760208185018101518683018201520162002f76565b506000602082860101526020601f19601f83011685010191505092915050565b600060208083018184528085518083526040925060408601915060408160051b87010184880160005b83811015620030bf57603f1989840301855281516101408151855288820151818a8701526200300f8287018262002f6c565b915050878201518582038987015262003029828262002f6c565b91505060608083015181870152506080808301518683038288015262003050838262002f6c565b9250505060a080830151818701525060c0808301516200307a828801826001600160a01b03169052565b505060e082810151151590860152610100808301516001600160a01b039081169187019190915261012092830151169190940152938601939086019060010162002fdd565b509098975050505050505050565b60008060408385031215620030e157600080fd5b82359150602083013567ffffffffffffffff8111156200310057600080fd5b6200310e8582860162002d95565b9150509250929050565b6000602082840312156200312b57600080fd5b5035919050565b80356001600160a01b03811681146200314a57600080fd5b919050565b600080604083850312156200316357600080fd5b82359150620031756020840162003132565b90509250929050565b803580151581146200314a57600080fd5b60008060008060808587031215620031a657600080fd5b84359350620031b86020860162003132565b9250620031c8604086016200317e565b9150620031d8606086016200317e565b905092959194509250565b634e487b7160e01b600052603260045260246000fd5b602080825260119082015270125d195b48185b1c9958591e481cdbdb19607a1b604082015260600190565b600181811c908216806200323957607f821691505b6020821081036200325a57634e487b7160e01b600052602260045260246000fd5b50919050565b601f82111562002c73576000816000526020600020601f850160051c810160208610156200328b5750805b601f850160051c820191505b81811015620013ba5782815560010162003297565b815167ffffffffffffffff811115620032c957620032c962002d7f565b620032e181620032da845462003224565b8462003260565b602080601f831160018114620033195760008415620033005750858301515b600019600386901b1c1916600185901b178555620013ba565b600085815260208120601f198616915b828110156200334a5788860151825594840194600190910190840162003329565b5085821015620033695787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b634e487b7160e01b600052601160045260246000fd5b600060018201620033a457620033a462003379565b5060010190565b6020808252600e908201526d125d195b481b9bdd08199bdd5b9960921b604082015260600190565b60208152600062002bd4602083018462002f6c565b81810381811115620033fe57620033fe62003379565b92915050565b81810362003410575050565b6200341c825462003224565b67ffffffffffffffff81111562003437576200343762002d7f565b6200344881620032da845462003224565b6000601f8211600181146200347f5760008315620034665750848201545b600019600385901b1c1916600184901b17845562000cfe565b600085815260209020601f19841690600086815260209020845b83811015620034bb578286015482556001958601959091019060200162003499565b5085831015620033695793015460001960f8600387901b161c19169092555050600190811b01905550565b634e487b7160e01b600052603160045260246000fd5b634e487b7160e01b600052602160045260246000fd5b6000602082840312156200352557600080fd5b81516005811062002bd457600080fd5b6000602082840312156200354857600080fd5b5051919050565b80820180821115620033fe57620033fe62003379565b6040815260006200357a604083018562002f6c565b90508260208301529392505050565b6060815260006200359e606083018662002f6c565b8281036020840152620035b2818662002f6c565b91505060018060a01b038316604083015294935050505056fe60806040526040516200195138038062001951833981016040819052620000269162000124565b60018054600280546001600160a01b038581166001600160a01b03199283161790925560038054909116736a7d3230514ee0e8078f23cf65b367d9984b055a17905584166101000260ff199081166001600160a81b0319909216919091178255600580549091169055426000908155600480549283018155905260408051808201909152600c81526b24ba32b6903137bab3b43a1760a11b60208201527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b90910190620000f4908262000203565b50506008805460ff1916905550620002cf565b80516001600160a01b03811681146200011f57600080fd5b919050565b600080604083850312156200013857600080fd5b620001438362000107565b9150620001536020840162000107565b90509250929050565b634e487b7160e01b600052604160045260246000fd5b600181811c908216806200018757607f821691505b602082108103620001a857634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620001fe576000816000526020600020601f850160051c81016020861015620001d95750805b601f850160051c820191505b81811015620001fa57828155600101620001e5565b5050505b505050565b81516001600160401b038111156200021f576200021f6200015c565b620002378162000230845462000172565b84620001ae565b602080601f8311600181146200026f5760008415620002565750858301515b600019600386901b1c1916600185901b178555620001fa565b600085815260208120601f198616915b82811015620002a0578886015182559484019460019091019084016200027f565b5085821015620002bf5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b61167280620002df6000396000f3fe6080604052600436106100fe5760003560e01c80638285074b11610095578063c00ccd5411610064578063c00ccd541461027e578063d16f5b291461029e578063dd3fa136146102c8578063df8d93b4146102e8578063eaaf0b63146102fd57600080fd5b80638285074b1461021c57806389e1e82a1461023c578063afe010431461024f578063be6cb8381461027657600080fd5b80635b0222bb116100d15780635b0222bb1461019e5780635e10177b146101c257806364e6aa52146101d75780637150d8ae146101f757600080fd5b806308551a53146101035780631865c57d1461014057806319561dae146101655780634fd6137c14610187575b600080fd5b34801561010f57600080fd5b50600254610123906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561014c57600080fd5b50610155610321565b60405161013794939291906111d1565b34801561017157600080fd5b5061017a6104f0565b6040516101379190611222565b34801561019357600080fd5b5061019c61057e565b005b3480156101aa57600080fd5b506101b460005481565b604051908152602001610137565b3480156101ce57600080fd5b5061019c61069f565b3480156101e357600080fd5b5061017a6101f236600461123c565b6107d7565b34801561020357600080fd5b506001546101239061010090046001600160a01b031681565b34801561022857600080fd5b5061019c61023736600461126b565b610802565b61019c61024a36600461131c565b610931565b34801561025b57600080fd5b506001546102699060ff1681565b604051610137919061133e565b61019c610afe565b34801561028a57600080fd5b5061019c61029936600461126b565b610c86565b3480156102aa57600080fd5b506008546102b89060ff1681565b6040519015158152602001610137565b3480156102d457600080fd5b5061019c6102e336600461126b565b610d88565b3480156102f457600080fd5b5061017a610f45565b34801561030957600080fd5b50610312610f52565b60405161013793929190611352565b60006060806060600160009054906101000a900460ff1660096006600782805461034a906113de565b80601f0160208091040260200160405190810160405280929190818152602001828054610376906113de565b80156103c35780601f10610398576101008083540402835291602001916103c3565b820191906000526020600020905b8154815290600101906020018083116103a657829003601f168201915b505050505092508180546103d6906113de565b80601f0160208091040260200160405190810160405280929190818152602001828054610402906113de565b801561044f5780601f106104245761010080835404028352916020019161044f565b820191906000526020600020905b81548152906001019060200180831161043257829003601f168201915b50505050509150808054610462906113de565b80601f016020809104026020016040519081016040528092919081815260200182805461048e906113de565b80156104db5780601f106104b0576101008083540402835291602001916104db565b820191906000526020600020905b8154815290600101906020018083116104be57829003601f168201915b50505050509050935093509350935090919293565b600680546104fd906113de565b80601f0160208091040260200160405190810160405280929190818152602001828054610529906113de565b80156105765780601f1061054b57610100808354040283529160200191610576565b820191906000526020600020905b81548152906001019060200180831161055957829003601f168201915b505050505081565b60015461010090046001600160a01b031633146105b65760405162461bcd60e51b81526004016105ad90611418565b60405180910390fd5b6001805460ff1660048111156105ce576105ce611153565b146106255760405162461bcd60e51b815260206004820152602160248201527f43616e6e6f74206f70656e2064697370757465206174207468697320737461676044820152606560f81b60648201526084016105ad565b6001805460ff199081166003178255600880549091168217905560048054918201815560005260408051808201909152601c81527f44697370757465206f70656e6564206279207468652062757965722e0000000060208201526000805160206115f48339815191529091019061069c90826114a0565b50565b60015461010090046001600160a01b031633146106ce5760405162461bcd60e51b81526004016105ad90611418565b6001805460ff1660048111156106e6576106e6611153565b146107335760405162461bcd60e51b815260206004820152601760248201527f43616e6e6f7420636f6e6669726d2064656c697665727900000000000000000060448201526064016105ad565b6002546040516001600160a01b03909116904780156108fc02916000818181858888f1935050505015801561076c573d6000803e3d6000fd5b506001805460ff1916600217815560048054918201815560005260408051808201909152601b81527f4974656d207265636965766564206279207468652062757965722e000000000060208201526000805160206115f48339815191529091019061069c90826114a0565b600481815481106107e757600080fd5b9060005260206000200160009150905080546104fd906113de565b60015461010090046001600160a01b031633146108315760405162461bcd60e51b81526004016105ad90611418565b600360015460ff16600481111561084a5761084a611153565b146108675760405162461bcd60e51b81526004016105ad90611560565b60078054610874906113de565b1590506108c35760405162461bcd60e51b815260206004820181905260248201527f50726f6f6620616c7265616479207375626d697474656420627920627579657260448201526064016105ad565b6000600680546108d2906113de565b9050116109215760405162461bcd60e51b815260206004820152601e60248201527f53656c6c6572206d757374207375626d69742070726f6f66206669727374000060448201526064016105ad565b600761092d82826114a0565b5050565b6003546001600160a01b031633146109975760405162461bcd60e51b8152602060048201526024808201527f4f6e6c792061726269747261746f722063616e2063616c6c2074686973206d656044820152631d1a1bd960e21b60648201526084016105ad565b600360015460ff1660048111156109b0576109b0611153565b146109cd5760405162461bcd60e51b81526004016105ad90611560565b8015610a60576001546040516001600160a01b0361010090920491909116904780156108fc02916000818181858888f19350505050158015610a13573d6000803e3d6000fd5b50600480546001810182556000918252604080516060810190915260238082526000805160206115f483398151915290920192916115d16020830139610a5a9150826114a0565b50610ae2565b6002546040516001600160a01b03909116904780156108fc02916000818181858888f19350505050158015610a99573d6000803e3d6000fd5b50600480546001810182556000918252604080516060810190915260248082526000805160206115f483398151915290920192916115ad6020830139610ae09150826114a0565b505b506001805460ff19908116600417909155600880549091169055565b600060015460ff166004811115610b1757610b17611153565b14610b985760405162461bcd60e51b8152602060048201526044602482018190527f43616e6e6f7420726566756e642e204974656d2068617320616c726561647920908201527f6265656e2073686970706564206f7220697320696e20616e6f7468657220737460648201526330ba329760e11b608482015260a4016105ad565b600054610ba690603c61158b565b4210610bf45760405162461bcd60e51b815260206004820152601f60248201527f43616e63656c6c6174696f6e20706572696f6420686173207061737365642e0060448201526064016105ad565b6001546040516001600160a01b0361010090920491909116904780156108fc02916000818181858888f19350505050158015610c34573d6000803e3d6000fd5b506001805460ff191660049081178255805491820181556000908152604080516060810190915260298082526000805160206115f483398151915290930192611614602083013961069c9150826114a0565b6002546001600160a01b03163314610ce05760405162461bcd60e51b815260206004820181905260248201527f4f6e6c792073656c6c65722063616e2063616c6c2074686973206d6574686f6460448201526064016105ad565b600360015460ff166004811115610cf957610cf9611153565b14610d165760405162461bcd60e51b81526004016105ad90611560565b60068054610d23906113de565b159050610d7c5760405162461bcd60e51b815260206004820152602160248201527f50726f6f6620616c7265616479207375626d69747465642062792073656c6c656044820152603960f91b60648201526084016105ad565b600661092d82826114a0565b6002546001600160a01b03163314610de25760405162461bcd60e51b815260206004820181905260248201527f4f6e6c792073656c6c65722063616e2063616c6c2074686973206d6574686f6460448201526064016105ad565b600060015460ff166004811115610dfb57610dfb611153565b14610e485760405162461bcd60e51b815260206004820152601e60248201527f43616e6e6f7420736869702e20496e636f7272656374207374617475732e000060448201526064016105ad565b600054610e5690603c61158b565b421015610ecb5760405162461bcd60e51b815260206004820152603d60248201527f43616e6e6f742073686970206265666f7265203135206d696e7574652063616e60448201527f63656c6c6174696f6e20706572696f642068617320656c61707365642e00000060648201526084016105ad565b6001805460ff1916811790556009610ee382826114a0565b506004805460018101825560009190915260408051808201909152601881527f4974656d2073656e74206279207468652073656c6c65722e000000000000000060208201526000805160206115f48339815191529091019061092d90826114a0565b600780546104fd906113de565b606080606060046006600782805480602002602001604051908101604052809291908181526020016000905b8282101561102a578382906000526020600020018054610f9d906113de565b80601f0160208091040260200160405190810160405280929190818152602001828054610fc9906113de565b80156110165780601f10610feb57610100808354040283529160200191611016565b820191906000526020600020905b815481529060010190602001808311610ff957829003601f168201915b505050505081526020019060010190610f7e565b50505050925081805461103c906113de565b80601f0160208091040260200160405190810160405280929190818152602001828054611068906113de565b80156110b55780601f1061108a576101008083540402835291602001916110b5565b820191906000526020600020905b81548152906001019060200180831161109857829003601f168201915b505050505091508080546110c8906113de565b80601f01602080910402602001604051908101604052809291908181526020018280546110f4906113de565b80156111415780601f1061111657610100808354040283529160200191611141565b820191906000526020600020905b81548152906001019060200180831161112457829003601f168201915b50505050509050925092509250909192565b634e487b7160e01b600052602160045260246000fd5b6005811061118757634e487b7160e01b600052602160045260246000fd5b9052565b6000815180845260005b818110156111b157602081850181015186830182015201611195565b506000602082860101526020601f19601f83011685010191505092915050565b6111db8186611169565b6080602082015260006111f1608083018661118b565b8281036040840152611203818661118b565b90508281036060840152611217818561118b565b979650505050505050565b602081526000611235602083018461118b565b9392505050565b60006020828403121561124e57600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b60006020828403121561127d57600080fd5b813567ffffffffffffffff8082111561129557600080fd5b818401915084601f8301126112a957600080fd5b8135818111156112bb576112bb611255565b604051601f8201601f19908116603f011681019083821181831017156112e3576112e3611255565b816040528281528760208487010111156112fc57600080fd5b826020860160208301376000928101602001929092525095945050505050565b60006020828403121561132e57600080fd5b8135801515811461123557600080fd5b6020810161134c8284611169565b92915050565b6000606082016060835280865180835260808501915060808160051b8601019250602080890160005b838110156113a957607f1988870301855261139786835161118b565b9550938201939082019060010161137b565b505050505082810360208401526113c0818661118b565b905082810360408401526113d4818561118b565b9695505050505050565b600181811c908216806113f257607f821691505b60208210810361141257634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252601f908201527f4f6e6c792062757965722063616e2063616c6c2074686973206d6574686f6400604082015260600190565b601f82111561149b576000816000526020600020601f850160051c810160208610156114785750805b601f850160051c820191505b8181101561149757828155600101611484565b5050505b505050565b815167ffffffffffffffff8111156114ba576114ba611255565b6114ce816114c884546113de565b8461144f565b602080601f83116001811461150357600084156114eb5750858301515b600019600386901b1c1916600185901b178555611497565b600085815260208120601f198616915b8281101561153257888601518255948401946001909101908401611513565b50858210156115505787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6020808252601190820152704e6f20616374697665206469737075746560781b604082015260600190565b8082018082111561134c57634e487b7160e01b600052601160045260246000fdfe4469737075746520636c6f7365642e2053656c6c65722077617320726566756e6465642e4469737075746520636c6f7365642e2042757965722077617320726566756e6465642e8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b4974656d2063616e63656c6c656420616e6420726566756e64656420746f207468652062757965722ea2646970667358221220b1ff31f288d9595ec552e1c4b4ada91a4178bde62f8a4f78a2332d31c507424464736f6c63430008180033a264697066735822122013fced70b5cac64a49f5d0a37543b7b127920b662340adecf82858bcaf0f62c664736f6c63430008180033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 461,
        "contract": "contracts/Item.sol:Item",
        "label": "items",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_array(t_struct(ItemStruct)455_storage)dyn_storage)"
      },
      {
        "astId": 463,
        "contract": "contracts/Item.sol:Item",
        "label": "itemsCount",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 466,
        "contract": "contracts/Item.sol:Item",
        "label": "sellers",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_address)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(ItemStruct)455_storage)dyn_storage": {
        "base": "t_struct(ItemStruct)455_storage",
        "encoding": "dynamic_array",
        "label": "struct Item.ItemStruct[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(Escrow)429": {
        "encoding": "inplace",
        "label": "contract Escrow",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_array(t_struct(ItemStruct)455_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Item.ItemStruct[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(ItemStruct)455_storage)dyn_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(ItemStruct)455_storage": {
        "encoding": "inplace",
        "label": "struct Item.ItemStruct",
        "members": [
          {
            "astId": 435,
            "contract": "contracts/Item.sol:Item",
            "label": "itemId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 437,
            "contract": "contracts/Item.sol:Item",
            "label": "title",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 439,
            "contract": "contracts/Item.sol:Item",
            "label": "description",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 441,
            "contract": "contracts/Item.sol:Item",
            "label": "price",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 443,
            "contract": "contracts/Item.sol:Item",
            "label": "image",
            "offset": 0,
            "slot": "4",
            "type": "t_string_storage"
          },
          {
            "astId": 445,
            "contract": "contracts/Item.sol:Item",
            "label": "createdAt",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 447,
            "contract": "contracts/Item.sol:Item",
            "label": "buyer",
            "offset": 0,
            "slot": "6",
            "type": "t_address"
          },
          {
            "astId": 449,
            "contract": "contracts/Item.sol:Item",
            "label": "hasBuyer",
            "offset": 20,
            "slot": "6",
            "type": "t_bool"
          },
          {
            "astId": 452,
            "contract": "contracts/Item.sol:Item",
            "label": "escrow",
            "offset": 0,
            "slot": "7",
            "type": "t_contract(Escrow)429"
          },
          {
            "astId": 454,
            "contract": "contracts/Item.sol:Item",
            "label": "seller",
            "offset": 0,
            "slot": "8",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "288"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}